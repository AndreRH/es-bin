#!/bin/bash

# power utility
# c.f. https://lesswatts.org/tips

# ----------------------------------------------------------------------
# Source functions library
# ----------------------------------------------------------------------
# handles both symlinked and original script
# expects function file in same directory as script (or script target)

DEBUG=true
functions="$(dirname $(readlink -f $0))/functions"
[ -e "$functions" ] || functions=/usr/bin/functions
. "$functions"

# ----------------------------------------------------------------------
# Run as root, not user
# ----------------------------------------------------------------------
if ! Is_Root && [[ "${1:-}" != "recursive" ]] ; then
    sudo power recursive $*
    Quiet_Exit
    Completed
    exit
elif [[ "${1:-}" == "recursive" ]] && Is_Root; then
    shift; Set_Initial_Args "$*"
else
    : # running correctly as user, non recursive
fi

# ----------------------------------------------------------------------
# Script Local Functions
# ----------------------------------------------------------------------

AC_Power_Is_Connected ()
{
    [[ $(cat /sys/class/power_supply/AC/online) > 0 ]]
}

Display_Powersave ()
{
# on | off | skip

    case $1 in
        on) dpms_seconds=60 backlight_percent=80 display_powersave=true ;;
        off) dpms_seconds=600 backlight_percent=100 display_powersave=false ;;
        skip) return 0 ;;
        *) Warn "missing argument"; exit 1 ;;
    esac

    # function settings -----------------------------------------------

    _VIDEOPATH=/sys/class/backlight/acpi_video0
    _SKIP_i915=true

    # set brightness --------------------------------------------------

    current_brightness=$(cat $_VIDEOPATH/actual_brightness)
    full_brightness=$(cat $_VIDEOPATH/max_brightness)
    new_brightness=$(((${backlight_percent}*${full_brightness})/100))
    [[ $current_brightness -gt $new_brightness ]] && _sign="-"
    for _b in $(seq $current_brightness ${_sign:-}1 $new_brightness)
    do echo -n $_b > $_VIDEOPATH/brightness; sleep 0.015; done

    # driver power management (may skip) ------------------------------

    if ! $_SKIP_i915; then
        $display_powersave && _rc6=1 _fbc=1 || _rc6=0 _fbc=-1
        _path="/sys/module/i915/parameters/"
        for _param in i915_enable_rc6 i915_enable_fbc; do
            _param_value_varname="${_param:$((${#_param}-4)):4}"
            _param_value=${!_param_value_varname}
            [ "$(stat --format "%a" "${_path}${_param}")" -ge 600 ] \
            && echo -n $_param_value > "${_path}${_param}"
        done
    fi

    # dpms timeouts ---------------------------------------------------

    #TODO: xscreensaver should probably handle this
    #and should probably set/reset xscreensaver settings here

    [ -n "${dpms_seconds:-}" ] \
    && As_User "xset dpms 0 0 $dpms_seconds &>/dev/null"

}

Bus_ASPM_Wacom_Powersave ()
{
# Examples:
# Set_Bus_ASPM_Wacom on on off
# Set_Bus_ASPM_Wacom on skip on
# Set_Bus_ASPM_Wacom on
# Set_Bus_ASPM_Wacom off
# 1 args: all settings take same value
# 3 args: [on|off|skip] general bus powersaving, wacom, pcieaspm
Debug BUS

    # bus powersaving mode
    case $1 in
        on) _bus=auto ;;
        off) _bus=on ;;
        skip) _bus= ;;
        *)
            Warn "Bad argument for bus powersaving mode"
            return 1
            ;;
    esac

    # PCIE ASPM powersaving mode
    case ${2:-$1} in # use bus powersaving value if missing
        on) _pcie_aspm=powersave ;;
        off) _pcie_aspm=performance ;;
        skip) _pcie_aspm= ;;
        *)
            Warn "Bad argument for pcie aspm powersaving mode"
            return 1
            ;;
    esac

    # wacom powersaving mode (missing defaults to bus value)
    case ${3:-$1} in # use bus powersaving value if missing
        on) _wacom=auto ;;
        off) _wacom=on ;;
        skip) _wacom= ;;
        *)
            Warn "Bad argument for wacom powersaving mode"
            return 1
            ;;
    esac

    # PCIE ASPM values include: default | performance | powersave
    # -----------------------------------------------------------------
    if [ -n "$_pcie_aspm" ]; then
        echo -n $_pcie_aspm \
        > "/sys/module/pcie_aspm/parameters/policy" \
        || Warn "Failed to set PCIE ASPM policy"
    fi
    
    # Bus powersavings brute force
    # -----------------------------------------------------------------
    # not sure about the other buses, so just going for pci/usb, but all
    # buses could be set using this:
    # for _path in /sys/bus/*/devices/*/power/control; do
    
    if [ -n "$_bus" ]; then
        for _path in /sys/bus/{pci,usb}/devices/*/power/control; do
            echo -n $_bus > "$_path" || Warn "Failed to write to $_path"
        done
    fi

    # Wacom powersaving
    # -----------------------------------------------------------------
    # if wacom is the same as bus, we can skip since it has already
    # been set

    if [ -n "$_wacom" ] && [ "$_wacom" != "$_bus" ]; then
        for _path in /sys/bus/usb/devices/*/manufacturer; do
            if [[ -f "$_path" && "$(cat "$_path")" == "Tablet" ]]; then
                echo -n $_wacom > "$(dirname $_path)/power/control" \
                || Warn "Failed to set Wacom powersavings mode"
            fi
        done
    fi

}

CPU_Powersave ()
{

    case $1 in
        on) _governor=powersave _sched=2 _perfbias=15 ;;
        off) _governor=ondemand _sched=0 _perfbias=0 ;;
        skip) return 0 ;;
        *)
            Warn "Bad argument for cpu powersaving mode"
            return 1
            ;;
    esac

    # powersave | ondemand | performance
    # check with `cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors`
    # check current with `cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor`
    # useful: https://wiki.archlinux.org/index.php/User:Stefanwilkens
    # sched values:
    # 0 - No power saving load balance (default value)
    # 1 - Fill one thread/core/package first for long running threads
    # 2 - Also bias task wakeups to semi-idle cpu package for power savings
    
    # cpu governor
    cpupower -c all frequency-set -g $_governor &>/dev/null || Warn "Failed to set cpu governor"
    
    # cpu performance bias
    cpupower -c all set -b $_perfbias &>/dev/null || Warn "Failed to set cpu performance bias"
    
    # following has been either removed from kernel or cpu doesn't support properly
    # multi-core scheduler power saving
    # cpupower -c all set --sched-mc $_sched # &>/dev/null
    # cpupower -c all set --sched-smt $_sched # &>/dev/null
}

Wifi_Powersave ()
{
Debug WIFI

    case $1 in
        on) _wifi=on _wifipwr=Y ;;
        off) _wifi=off _wifipwr=N ;;
        skip) return 0 ;;
        *)
            Warn "Bad argument for wifi powersaving mode"
            return 1
            ;;
    esac

    iw dev wlan0 set power_save $_wifi &>/dev/null

    # The folllowing is handled in /etc/modprobe.d/iwlwifi.conf now
    # echo -n $_wifipwr > /sys/module/iwlwifi/parameters/power_save
}

Disk_Powersave ()
{
Debug DISK POWERAVE

    # DISK POWERSAVING ------------------------------------------------
    # aggressive disk powersave after 60 sec
    # -B 1=maximum power saving / 254=no power saving
    # -S 12=spin down after 60 seconds / 0=no spin down

    # TODO: consider increasing writeback to > 1500

    case $1 in
        on) kwm=on _B=1 _S=12 _scsipwr=min_power ;;
        off) kwm=off _B=254 _S=0 _scsipwr=max_performance ;;
        skip) return 0 ;;
        *)
            Warn "Bad argument for kernel write mode powersaving"
            return 1
            ;;
    esac

    case $kwm in
        on) sysctl -q vm.laptop_mode=5 \
                vm.dirty_ratio=60 \
                vm.dirty_background_ratio=40 \
                vm.dirty_expire_centisecs=3000 \
                vm.dirty_writeback_centisecs=1500 ;;
        off) sysctl -q vm.laptop_mode=0 \
                vm.dirty_ratio=10 \
                vm.dirty_background_ratio=5 \
                vm.dirty_expire_centisecs=3000 \
                vm.dirty_writeback_centisecs=500 ;;
    esac

    for _disk in /dev/sd?; do
        hdparm -i $_disk | egrep -i -q "AdvancedPM\s*=\s*yes" \
        && hdparm -B $_B -S $_S $_disk &>/dev/null \
        || Warn "Failed to set disk powersaving with hdparm";
    done

    for _scsi in /sys/class/scsi_host/*/link_power_management_policy; do
        echo -n $_scsipwr > "$_scsi" \
        || Warn "Failed to set scsi powersaving";
    done

    # TODO: consider adding blockdev --setra value for readahead control?

}

Soundcard_Powersave ()
{
Debug SOUND CARD
    case $1 in
        on) _snd=1 _sndcnt=Y ;;
        off) _snd=0 _sndcnt=N ;;
        skip) return 0 ;;
        *)
            Warn "Bad argument for sound card powersaving mode"
            return 1
            ;;
    esac
    echo -n $_snd > /sys/module/snd_hda_intel/parameters/power_save
    echo -n $_sndcnt > /sys/module/snd_hda_intel/parameters/power_save_controller
}

# ----------------------------------------------------------------------
# Power Functions
# ----------------------------------------------------------------------

case $1 in

    auto)
        AC_Power_Is_Connected \
        && power max silent \
        || power min silent
        Quiet_Exit
        ;;

    toggle)
        _modes=(min max)
        [[ "$(Get_State)" == "${_modes[0]}" ]] \
        && power ${_modes[1]} \
        || power ${_modes[0]}
        Quiet_Exit
        ;;

    cycle)
        _modes=(min max mov)
        _mode="auto"
        for _s in $(seq 0 $((${#_modes[@]} - 1))); do 
            if [[ "$(Get_State)" == "${_modes[$_s]}" ]]; then
                _mode=${_modes[$(( ++_s % ${#_modes[@]} ))]}
            fi
        done
	power $_mode
        Quiet_Exit
        ;;

    min)
        Bus_ASPM_Wacom_Powersave on on on
        CPU_Powersave on
        Disk_Powersave on
        Display_Powersave on
        Soundcard_Powersave on
        Wifi_Powersave on
        [ "${2:-}" == "silent" ] && INITIAL_ARGS="$1"
        Set_State
        ;;

    med)
        Bus_ASPM_Wacom_Powersave on on off
        CPU_Powersave on
        Disk_Powersave off
        Display_Powersave on
        Soundcard_Powersave on
        Wifi_Powersave on
        [ "${2:-}" == "silent" ] && INITIAL_ARGS="$1"
        Set_State
        ;;

    max)
        Bus_ASPM_Wacom_Powersave off off off
        CPU_Powersave off
        Disk_Powersave off
        Display_Powersave off
        Soundcard_Powersave off
        Wifi_Powersave off
        [ "${2:-}" == "silent" ] && INITIAL_ARGS="$1"
        Set_State
        ;;

    mov)
        Bus_ASPM_Wacom_Powersave off off off
        CPU_Powersave off
        Disk_Powersave off
        Display_Powersave off
        Soundcard_Powersave off
        Wifi_Powersave off
        [ "${2:-}" == "silent" ] && INITIAL_ARGS="$1"
        Set_State
        ;;

    preshutdown)
        CPU_Powersave off
        Remove_State
        Quiet_Exit
        ;;

    displayforce)
        # used when display fails to turn back on
        Display_Powersave off
        #Quiet_Exit
        ;;

    *) exit ;;

esac

# TODO: why did i put this in this script?
# NMI WATCHDOG ----------------------------------------------------
#$nmi_watchdog && _nmi=1 || _nmi=0; sysctl -q kernel.nmi_watchdog=$_nmi

[ "${2:-}" == "silent" ] && Quiet_Exit
Completed
