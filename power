#!/bin/bash

# power utility
# c.f. https://lesswatts.org/tips

# ----------------------------------------------------------------------
# Bail if not root/sudo
# ----------------------------------------------------------------------

#if [ "$(whoami)" != "root" ]; then echo "Must be root/sudo."; exit; fi
if [ "$(whoami)" != "root" ]; then sudo power $*; exit; fi

[ -z "${1:-}" ] && echo "missing arguments" && exit 1

# ----------------------------------------------------------------------
# Globals
# ----------------------------------------------------------------------

# buckle up
#set -o errexit
#set -o nounset

# to retain state over reboots
STATEROOT=/var/tmp

# to taste
MIN_BACKLIGHT_PERCENT=80
MAX_BACKLIGHT_PERCENT=100

# TODO: note here now to locate these
VIDEOPATH=/sys/class/backlight/acpi_video0

# whether to skip setting i915 power manually (true=allow auto management)
SKIP_i915=true

Debug ()
{
return 0;
# quick debug function, better info than "caller"
# called without parameters at top of function; reports where it was called 
# from (calling function and line number)
[[ ${1:-} ]] && local with_args=" with arguments \"$@\"" || local with_args=""
echo "FUNCTION: ${FUNCNAME[1]:-}() line ${BASH_LINENO[0]} called by ${FUNCNAME[2]:-}${with_args} at line ${BASH_LINENO[1]}"
}

# ----------------------------------------------------------------------
# Find User & Environment Variables
# ----------------------------------------------------------------------
# if running as root we need to get some user environment vars

ROOTMODE=false
# assuming default mode is non-root user
ASUSER="eval"
if [[ -z ${USER:-} ]]; then
    ROOTMODE=true
    for _windowmanager in xmonad xfce bash zsh; # in console uses bash/zsh login
    do _pid=$(pgrep -o $_windowmanager) && break; done
    for _envvar in USER XAUTHORITY DISPLAY DBUS_SESSION_BUS_ADDRESS;
    do eval export $(grep -z ^$_envvar /proc/$_pid/environ); done
    ASUSER="su $USER -c"
fi


# ----------------------------------------------------------------------
# System Action Functions
# ----------------------------------------------------------------------

case $1 in

    sleep|suspend)
    $ASUSER "/usr/bin/display lock &>/dev/null";
    bloop sleep;
    systemctl suspend;
    $ASUSER "/usr/bin/display auto norestart";
    $ASUSER "/usr/bin/display unlock &";
    $ASUSER "/usr/bin/power auto &";
    bloop resume;
    exit;
    ;;

    poweroff|off|shutdown) bloop shutdown; power preshutdown; rmmod e1000e; systemctl poweroff || exit 1; ;;

    reboot|restart) bloop shutdown; power preshutdown; systemctl reboot || exit 1; ;;

    hibernate) exit; ;; # TODO: encrypted swap hibernate support

    boot) bloop startup; sudo wireless all restore; power auto; exit; ;;

    auto) [[ $(cat /sys/class/power_supply/AC/online) > 0 ]] && power max || power min; exit; ;;

    toggle) _mode=(min max); _state=$(cat $STATEROOT/power); [[ $_state == "${_mode[0]}" ]] && power ${_mode[1]} && return; power ${_mode[0]}; exit; ;;

    cycle)
        _mode=(min max mov); _state=$(cat $STATEROOT/power); _post="power auto"
        for _s in $(seq 0 $((${#_mode[@]} - 1))); do 
            if [[ ${_state:-} == ${_mode[$_s]} ]]; then
                _post=; power ${_mode[$(( ++_s % ${#_mode[@]} ))]} && break;
            fi
        done
	eval "$_post"; return
        ;;

    min)
        mode=min
        cpu_powersave=true
        display_powersave=true
        powersave_bus=true
        powersave_wacom=true
        disk_powersave=true
        wifi_powersave=true
        pcie_aspm_powersave=true
        soundcard_powersave=true
        kernel_write_powersave=true
        nmi_watchdog=false
        dpms_seconds=60
        backlight_percent=80
        ;;

    med)
        mode=med
        cpu_powersave=true
        display_powersave=true
        powersave_bus=true
        wifi_powersave=true
        pcie_aspm_powersave=true
        soundcard_powersave=true
        nmi_watchdog=false
        powersave_wacom=false
        disk_powersave=false
        kernel_write_powersave=false
        dpms_seconds=60
        backlight_percent=80
        ;;

    max)
        mode=max
        nmi_watchdog=true
        cpu_powersave=false
        display_powersave=false
        powersave_bus=false
        powersave_wacom=false
        disk_powersave=false
        wifi_powersave=false
        pcie_aspm_powersave=false
        soundcard_powersave=false
        kernel_write_powersave=false
        dpms_seconds=600
        backlight_percent=100
        ;;

    mov)
        mode=mov
        nmi_watchdog=true
        cpu_powersave=false
        display_powersave=false
        powersave_bus=false
        powersave_wacom=false
        disk_powersave=false
        wifi_powersave=false
        pcie_aspm_powersave=false
        soundcard_powersave=false
        kernel_write_powersave=false
        dpms_seconds=600
        backlight_percent=100
        ;;

    preshutdown)
        mode=preshutdown
        nmi_watchdog=true
        cpu_powersave=false
        display_powersave=false
        powersave_bus=false
        powersave_wacom=false
        disk_powersave=false
        wifi_powersave=false
        pcie_aspm_powersave=false
        soundcard_powersave=false
        kernel_write_powersave=false
        dpms_seconds=600
        backlight_percent=100
        ;;

    *) exit ;;

esac

# shouldn't get this far without a mode, but just in case we forget to
# exit from a case statement above, let's bail here
[ -z "$mode" ] && exit

Debug "mode is $mode"

# ---------------------------------------------------------------------
# DISPLAY
# ---------------------------------------------------------------------

Debug DISPLAY

if [[ "${mode:0:3}" != "pre" ]]; then # skip if preshutdown

# set brightness ------------------------------------------------------

    current_brightness=$(cat $VIDEOPATH/actual_brightness)
    full_brightness=$(cat $VIDEOPATH/max_brightness)
    new_brightness=$(((${backlight_percent}*${full_brightness})/100))

    [[ $current_brightness -gt $new_brightness ]] && _sign="-"
    for _b in $(seq $current_brightness ${_sign:-}1 $new_brightness)
    do echo -n $_b > $VIDEOPATH/brightness; sleep 0.015; done

# driver power management (may skip) ----------------------------------

    if ! $SKIP_i915; then
        $display_powersave && _rc6=1 _fbc=1 || _rc6=0 _fbc=-1
        _path="/sys/module/i915/parameters/"
        for _param in i915_enable_rc6 i915_enable_fbc; do
            _param_value_varname="${_param:$((${#_param}-4)):4}"
            _param_value=${!_param_value_varname}
            [ "$(stat --format "%a" "${_path}${_param}")" -ge 600 ] \
            && echo -n $_param_value > "${_path}${_param}"
        done
    fi

# dpms timeouts -------------------------------------------------------
#TODO: xscreensaver should probably handle this

    xset dpms 0 0 $dpms_seconds &>/dev/null
fi


# ---------------------------------------------------------------------
# BUS
# ---------------------------------------------------------------------

Debug BUS

$powersave_bus && _bus=auto || _bus=on
$powersave_wacom && _wacom=auto || _wacom=on

# PCIE ASPM values include: default | performance | powersave
$pcie_aspm_powersave && _pcie_aspm=powersave || _pcie_aspm=performance
echo -n $_pcie_aspm > "/sys/module/pcie_aspm/parameters/policy"

# not sure about the other buses, so just going for pci/usb, but all
# buses could be set using this:
# for _path in /sys/bus/*/devices/*/power/control; do

for _path in /sys/bus/{pci,usb}/devices/*/power/control; do
    echo -n $_bus > "$_path" || true;
done

for _path in /sys/bus/usb/devices/*/manufacturer; do
    if [[ -f "$_path" && "$(cat "$_path")" == "Tablet" ]]; then
        echo -n $_wacom > "$(dirname $_path)/power/control" || true;
    fi
done


# ---------------------------------------------------------------------
# CPU
# ---------------------------------------------------------------------

Debug CPU

# powersave | ondemand | performance
# check with `cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors`
# check current with `cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor`
# useful: https://wiki.archlinux.org/index.php/User:Stefanwilkens
# sched values:
# 0 - No power saving load balance (default value)
# 1 - Fill one thread/core/package first for long running threads
# 2 - Also bias task wakeups to semi-idle cpu package for power savings

$cpu_powersave && _governor=powersave _sched=2 _perfbias=15 \
|| _governor=ondemand _sched=0 _perfbias=0
#|| _governor=performance _sched=0 _perfbias=0

# cpu governor
sudo cpupower -c all frequency-set -g $_governor &>/dev/null || true

# cpu performance bias
sudo cpupower -c all set -b $_perfbias &>/dev/null || true

# following segfaults, skipping
# multi-core scheduler power saving
#sudo cpupower -c all set --sched-mc $_sched # &>/dev/null
#sudo cpupower -c all set --sched-smt $_sched # &>/dev/null


# ---------------------------------------------------------------------
# WIFI
# ---------------------------------------------------------------------

Debug WIFI

$wifi_powersave && _wifi=on _wifipwr=Y || _wifi=off _wifipwr=N;
iw dev wlan0 set power_save $_wifi &>/dev/null

# HANDLED IN /etc/modprobe.d/iwlwifi.conf now
# echo -n $_wifipwr > /sys/module/iwlwifi/parameters/power_save


# ---------------------------------------------------------------------
# KERNEL WRITE MODES
# ---------------------------------------------------------------------
# TODO: consider increasing writeback to > 1500

Debug KERNEL WRITE MODES

if $kernel_write_powersave; then
    sudo sysctl -q vm.laptop_mode=5 \
        vm.dirty_ratio=60 \
        vm.dirty_background_ratio=40 \
        vm.dirty_expire_centisecs=3000 \
        vm.dirty_writeback_centisecs=1500
else
    sudo sysctl -q vm.laptop_mode=0 \
        vm.dirty_ratio=10 \
        vm.dirty_background_ratio=5 \
        vm.dirty_expire_centisecs=3000 \
        vm.dirty_writeback_centisecs=500
fi


# ---------------------------------------------------------------------
# SOUND CARD
# ---------------------------------------------------------------------

Debug SOUND CARD

$soundcard_powersave && _snd=1 _sndcnt=Y || _snd=0 _sndcnt=N
echo -n $_snd > /sys/module/snd_hda_intel/parameters/power_save
echo -n $_sndcnt > /sys/module/snd_hda_intel/parameters/power_save_controller

if [[ "${mode:0:3}" != "pre" ]]; then # skip if preshutdown
    # DISK POWERSAVING ------------------------------------------------
    # aggressive disk powersave after 60 sec
    # -B 1=maximum power saving / 254=no power saving
    # -S 12=spin down after 60 seconds / 0=no spin down
    $disk_powersave && _B=1 _S=12 _scsipwr=min_power || _B=254 _S=0 _scsipwr=max_performance
    for _disk in /dev/sd?; do hdparm -i $_disk | egrep -i -q "AdvancedPM\s*=\s*yes" && hdparm -B $_B -S $_S $_disk &>/dev/null || true; done
    for _scsi in /sys/class/scsi_host/*/link_power_management_policy; do echo -n $_scsipwr > "$_scsi"; done
    # TODO: consider adding blockdev --setra value for readahead control?
fi

    # NMI WATCHDOG ----------------------------------------------------
    $nmi_watchdog && _nmi=1 || _nmi=0; sysctl -q kernel.nmi_watchdog=$_nmi


# ---------------------------------------------------------------------
# RECORD STATE & NOTIFY
# ---------------------------------------------------------------------

Debug RECORD STATE

if [[ "${mode:0:3}" != "pre" ]]; then # skip if preshutdown
    # RECORD STATE ----------------------------------------------------
    echo -n $mode > $STATEROOT/power
    chmod a+rw $STATEROOT/power
else
    [ -f "$STATEROOT/power" ] && rm $STATEROOT/power
fi
