#!/bin/bash

# handles all hardware related events (acpi, udev) and can be called to execute 
# hardware related actions (from a window manager for example)
#
# can be triggered by udev rules, acpi events, wm scripts, cron, etc.

# ----------------------------------------------------------------------
# Globals
# ----------------------------------------------------------------------

set -o errexit
set -o nounset

STATE=/var/tmp
MIN_BACKLIGHT_PERCENT=80
MAX_BACKLIGHT_PERCENT=100
VIDEOPATH=/sys/class/backlight/acpi_video0
INTERNAL_DISPLAY=LVDS1

# ----------------------------------------------------------------------
# Find User & Environment Variables
# ----------------------------------------------------------------------

if [[ -z ${USER:-} ]];
then
    ROOTMODE=true
    for _windowmanager in xmonad xfce bash; # in console uses bash login
    do _pid=$(pgrep -o $_windowmanager) && break; done
    for _envvar in USER XAUTHORITY DISPLAY DBUS_SESSION_BUS_ADDRESS;
    do eval export $(grep -z ^$_envvar /proc/$_pid/environ); done
else
    ROOTMODE=
fi

# ----------------------------------------------------------------------
# System Action Functions
# ----------------------------------------------------------------------

system ()
{
    # it's possible that these should just be top level, e.g. "execute sleep"
    case $1 in
        sleep)
            echo -n mem >/sys/power/state;
            # following post resume
            power auto; sleep 5; display auto; Notify "AWAKE"; ;;
        poweroff|off|shutdown) power max; poweroff ;;
        reboot|restart) power max; reboot ;;
        hibernate) return ;; # TODO: encrypted swap hibernate support
        boot) wireless restore; power auto; ;;
        xboot) display auto; ;;
        consolelock) physlock -dsu $USER ;;
        lock) xscreensaver-command -lock ;;
        unlock) xscreensaver-command -deactivate ;;
    esac
}

power ()
{
    case $* in
        auto)
            # based on AC connection status
            [[ $(cat /sys/class/power_supply/AC/online) > 0 ]] \
            && power max || power min; return ;;
        toggle)
            _mode=(min max); _state=$(cat $STATE/power)
            [[ $_state == "${_mode[0]}" ]] && power ${_mode[1]} && return
            power ${_mode[0]}; return
            ;;
        cycle)
            _mode=(min max mov); _state=$(cat $STATE/power)
            for _s in $(seq 0 $((${#_mode[@]} - 1)))
            do echo $_s; [[ ${_state:-} == ${_mode[$_s]} ]] \
            && power ${_mode[$(( ++_s % ${#_mode[@]} ))]} && return; done
            power auto; return
            ;;
        min)
            mode=min
            cpu_governor=powersave
            powersave_brute_force=auto
            wlan_power_save=on
            dpms_seconds=60
            backlight_percent=75
            ;;
        max)
            mode=max
            cpu_governor=performance
            powersave_brute_force=on
            wlan_power_save=off
            dpms_seconds=600
            backlight_percent=100
            ;;
        mov)
            mode=mov
            cpu_governor=ondemand
            powersave_brute_force=on
            wlan_power_save=off
            dpms_seconds=600
            backlight_percent=100
            ;;
        *) return ;;
    esac

    current_brightness=$(cat $VIDEOPATH/actual_brightness)
    full_brightness=$(cat $VIDEOPATH/max_brightness)
    new_brightness=$(((${backlight_percent}*${full_brightness})/100))
    [[ $current_brightness -gt $new_brightness ]] && _sign="-"
    for _b in $(seq $current_brightness ${_sign:-}1 $new_brightness)
    do echo -n $_b > $VIDEOPATH/brightness; sleep 0.015; done

    for cpu in 0 1 2 3; do cpufreq-set -c $cpu -g $cpu_governor; done
    for _control in /sys/bus/{usb,pci,i2c,spi}/devices/*/power/control;
    do
        if [[ -f "$_control" ]]
        then
            # block wacom tablet from being powersaved
            _mfgr=$(dirname $(dirname $_control))/manufacturer
            [[ ! -f "$_mfgr" || $(cat "$_mfgr") != "Tablet" ]] \
                && echo $powersave_brute_force > $_control
        fi
    done

    iw wlan0 set power_save $wlan_power_save
    xset dpms 0 0 $dpms_seconds 2>/dev/null

    echo -n $mode > $STATE/power
    Notify "$mode power mode"

}

wireless ()
{
    case $* in
        toggle) bluetooth toggle; wifi toggle ;;
        on) bluetooth on; wifi on ;;
        off) bluetooth off; wifi off ;;
        restore) bluetooth restore; wifi restore ;;
    esac
}

wifi ()
{
    case $* in
        toggle) rfkill list wifi | egrep -iq "soft.*yes" && wifi off || wifi on ;;
        on) rfkill unblock wifi && ip link set wlan0 up; Notify "wifi on" && echo -n on > $STATE/wifi ;;
        off) rfkill block wifi && Notify "wifi off" && echo -n off > $STATE/wifi ;;
        restore)
            [[ -f "$STATE/wifi" ]] && [[ -n "$(cat "$STATE/wifi")" ]] && _state=$(cat "$STATE/wifi")
            wifi ${_state:-on}
            ;;
    esac
}

bluetooth ()
{
    case $* in
        toggle) rfkill list bluetooth | egrep -iq "soft.*yes" && bluetooth on || bluetooth off ;;
        on) rfkill unblock bluetooth && echo -n on > $STATE/bluetooth ;;
        off) rfkill block bluetooth && echo -n off > $STATE/bluetooth ;;
        restore)
            [[ -f "$STATE/bluetooth" ]] && [[ -n "$(cat "$STATE/bluetooth")" ]] && _state=$(cat "$STATE/bluetooth")
            bluetooth ${_state:-on}
            ;;
    esac
}

audio ()
{
    _vol_inc=2
    case $* in
#        output\ volume\ up) amixer set Master 5%+ unmute -q ;;
#        output\ volume\ down) amixer set Master 5%- unmute -q ;;
#        output\ mute) amixer set Master mute -q ;;
#        output\ unmute) amixer set Master unmute -q ;;
#        output\ toggle) amixer set Master toggle -q ;;
        output\ volume\ up)
            Is_True $ROOTMODE \
            && su ${USER:-} -c "/usr/bin/pamixer --increase $_vol_inc --unmute" \
            || /usr/bin/pamixer --increase $_vol_inc --unmute
            ;;
        output\ volume\ down)
            Is_True $ROOTMODE \
            && su ${USER:-} -c "/usr/bin/pamixer --decrease $_vol_inc  --unmute" \
            || /usr/bin/pamixer --decrease $_vol_inc --unmute
            ;;
        output\ mute)
            Is_True $ROOTMODE \
            && su ${USER:-} -c "/usr/bin/pamixer --mute" \
            || /usr/bin/pamixer --mute
            ;;
        output\ unmute)
            Is_True $ROOTMODE \
            && su ${USER:-} -c "/usr/bin/pamixer --unmute" \
            || /usr/bin/pamixer --unmute
            ;;
        output\ toggle)
            if Is_True $ROOTMODE; then
                mute_state="$(su $USER -c "/usr/bin/pamixer --get-mute")" || 
                true
            else
                mute_state="$(/usr/bin/pamixer --get-mute)" || true
            fi
            if Is_True "$mute_state"; then
                audio output unmute
            else
                audio output mute
            fi
            ;;
        output\ switch) ;;
        input\ mute) amixer set Capture mute -q ;;
        input\ unmute) amixer set Capture unmute -q ;;
        input\ toggle) amixer set Capture toggle -q ;;
    esac
}

media ()
{
    case $* in
        media\ mount) ;;
        media\ eject) ;;
    esac
}

indicator ()
{
    case $* in
        beep) ;;
        led\ blink\ on) ;;
        led\ blink\ off) ;;
        leds\ off) ;;
        leds\ on) ;;
    esac
}

input ()
{
    case $* in
        trackpad\ toggle) ;;
        wacom\ toggle) ;;
    esac
}

display ()
{
    logger "IN DISPLAY WITH $*"
    case $* in

        auto) _Display_Check_Cycle; return ;;
        cycle) Notify "Display Cycle"; _Display_Check_Cycle; return ;;

        rotate) ;;
        rotate\ external) ;;
        rotate\ internal) ;;
        invert) ;;
        mode\ tablet) ;;
        mode\ laptop) ;;

        annotate) ;;
        screenshot) ;;

        mode\ cycle) return ;; #_Display_Check_Cycle; return ;;

        external) Notify "Display External"; _Display_Multi_Output_External_Only; return ;;
        internal) Notify "Display Internal"; _Display_Multi_Output_Internal_Only; return ;;
        mirror) Notify "Display Mirror"; _Display_Multi_Output_Scaled_Mirror; return ;;

        brightness\ up) ;;
        brightness\ down) ;;

        suspend\ on) ;;
        suspend\ off) ;;
        suspend\ now) ;;

        screensaver\ on) ;;
        screensaver\ off) ;;
        screensaver\ now) ;;

    esac
}

# ----------------------------------------------------------------------
# Utility Functions
# ----------------------------------------------------------------------

Log () { logger "SYSTEM ACTION: $* (${FUNCNAME[1]})"; }

if [[ -n $ROOTMODE ]]
then
    Notify () { logger "$*"; su ${USER:-} -c "notify-send \"$*\""; }
else
    Notify () { logger "$*"; notify-send "$*"; }
fi

Is_True () {
    shopt -s nocasematch;
    case ${1:-} in 1|y|yes|on|true) return 0 ;; *) return 1 ;; esac;
    shopt -u nocasematch;
}

Debug ()
{
    # quick debug function, better info than "caller"
    # called without parameters at top of function; reports where it was called 
    # from (calling function and line number)
    [[ ${1:-} ]] && local with_args=" with arguments \"$@\"" || local with_args=""
    echo "FUNCTION: ${FUNCNAME[1]}() line ${BASH_LINENO[0]} called by ${FUNCNAME[2]}${with_args} at line ${BASH_LINENO[1]}"
}

declare -ag _notifications=()
Add_Notification ()
{
    declare -ag _notifications[${#_notifications[*]}]="$*"
}
Display_Notifications ()
{
    for _notification in "${_notifications[@]:-}"; do Notify "$_notification"; done
}

# ----------------------------------------------------------------------
# Library Functions
# ----------------------------------------------------------------------

_Restart_Xmonad ()
{
    xdotool key alt+q # initiate an xmonad restart, mostly for trayer
    sleep 0.5
}

# display related globals
declare -ag CONNECTED=()
declare -ag CONNECTED_ACTIVE=()
declare -ag CONNECTED_INACTIVE=()
declare -ag DISCONNECTED=()
declare -ag DISCONNECTED_ACTIVE=() # Zombies
declare -ag DISCONNECTED_INACTIVE=()
declare -Ag DISPLAY_STATE
declare -Ag DISPLAY_CURRENT
declare -Ag DISPLAY_NATIVE
declare -g APPLE_FIX=

_Display_State ()
{
    # per display values; example:
    # DISPLAY_STATE[LVDS1]=connected
    # DISPLAY_CURRENT[LVDS1]=1366x768
    # DISPLAY_NATIVE[LVDS1]=1366x768

    [[ -n "${DISPLAY_STATE[*]:-}" ]] && return # we've already set display state

    # simple arrays of connected/disconnected displays

    DISPLAY_INTERNAL=LVDS1
    DISPLAY_EXTERNAL=

    while read _line; do
        if [[ "$_line" == [A-Z]* ]]; then # any line with initial Alpha

            set -- $_line
            _source="$1" # LVDS1, DP1, etc
            declare -Ag DISPLAY_STATE[$_source]="$2"
            declare -Ag DISPLAY_CURRENT[$_source]="$(echo "$3" | sed "s/\([[:digit:]]*x[[:digit:]]*\)\?.*/\1/")"

            if [[ "${DISPLAY_STATE[$_source]}" == "connected" ]]; then

                declare -ag CONNECTED[${#CONNECTED[*]}]="$_source"
                [[ "$_source" != "${DISPLAY_INTERNAL}" ]] && DISPLAY_EXTERNAL=$_source # easily expanded to multiple displays as array

                if [[ -n ${DISPLAY_CURRENT[$_source]} ]]; then
                    declare -ag CONNECTED_ACTIVE[${#CONNECTED_ACTIVE[*]}]="$_source"
                else
                    declare -ag CONNECTED_INACTIVE[${#CONNECTED_INACTIVE[*]}]="$_source"
                fi

            else
                declare -ag DISCONNECTED[${#DISCONNECTED[*]}]="$_source"
                if [[ -n ${DISPLAY_CURRENT[$_source]} ]]; then
                    # zombie displays; configured but no longer connected
                    declare -ag DISCONNECTED_ACTIVE[${#DISCONNECTED_ACTIVE[*]}]="$_source"
                else
                    declare -ag DISCONNECTED_INACTIVE[${#DISCONNECTED_INACTIVE[*]}]="$_source"
                fi
            fi

        else

            # extract native resolution from mode line
            if [[ -z "${DISPLAY_NATIVE[$_source]:-}" ]]; then
                set -- $_line
                #declare -Ag DISPLAY_NATIVE[$_source]="$1"
                declare -Ag DISPLAY_NATIVE[$_source]="$(echo "$1" | sed "s/\([[:digit:]]*x[[:digit:]]*\)\?.*/\1/")"
            fi

        fi

    done < <(xrandr 2>/dev/null | egrep -iv "^screen")

}

_Display_Kill_Zombies ()
{
    _Display_State
    [[ -n ${DISCONNECTED_ACTIVE[@]:-} ]] && xrandr --auto || true
}

_Display_Check_Cycle ()
{
    _Display_State
    _display_change=

    _Display_Kill_Zombies

    if [[ -z $DISPLAY_EXTERNAL ]] && [[ -f "$STATE/display" ]] && grep -iq "multi" "$STATE/display"
    #if [[ -n ${DISCONNECTED_ACTIVE[@]:-} ]]
    then
    # only internal dispaly, make sure we are set to primary, non scaled display mode.
    # TODO: cycle through preferred internal display modes (rotations?)
        _xrandr_cmd_internal+="--output $DISPLAY_INTERNAL --primary --scale 1x1 --auto"
        xrandr $_xrandr_cmd_internal
        _display_change=true
        Add_Notification "Single display mode"
        [[ -e "$STATE/display" ]] && rm "$STATE/display"
    elif [[ -n $DISPLAY_EXTERNAL ]]
    then
    # we have an external display, let's check it and find out if it's an apple 
    # display and properly configured or if it's a normal display. Then check 
    # to see if we are outputing to it in our preferred mode. If we have 
    # multiple preferred modes, cycle through them.
    #
    # TODO: possible state is that an apple display was unplugged during sleep 
    # and a non apple display was connected prior to system wakeup. need to 
    # test whether the display is properly configured (the forced apple mode 
    # line is automatically removed) and whether we need to change the output 
    # settings, resolution for the new display...

        _Display_Apple_Fix

        # display modes for use with external display
        _display_modes=("multi output external only"
                        "multi output scaled mirror"
                        "multi output external above"
                        "multi output internal only")

        if [[ ! -f "$STATE/display" ]] || [[ -z "$(cat "$STATE/display")" ]]
        then
            _display_current_mode="${_display_modes[0]}"
        else
            _display_current_mode="$(cat $STATE/display)"
        fi
        for _s in $(seq 0 $((${#_display_modes[@]} - 1)))
        do
            if [[ ${_display_current_mode:-} == ${_display_modes[$_s]} ]]
            then

                _newmode="${_display_modes[$(( ++_s % ${#_display_modes[@]} ))]}"
                case $_newmode in
                    multi\ output\ external\ only)  _Display_Multi_Output_External_Only; ;;
                    multi\ output\ external\ above) _Display_Multi_Output_External_Above ;;
                    multi\ output\ scaled\ mirror)  _Display_Multi_Output_Scaled_Mirror ;;
                    multi\ output\ internal\ only)  _Display_Multi_Output_Internal_Only ;;
                esac
                Add_Notification "Display mode changed to $_newmode"
                _display_change=true
                echo -n "$_newmode" > "$STATE/display" && chmod +rw "$STATE/display"
            fi
        done

    fi

    [[ -n $_display_change ]] && _Restart_Xmonad || Add_Notification "No display state change"
    while ! pgrep dunst; do sleep 0.1; done
    Display_Notifications
}

_Display_Apple_Fix ()
{
    [[ -n $APPLE_FIX ]] && return
    _Display_State
    #if echo "$XRANDR_VERBOSE_STATE" | grep -q "00ffffffffffff000610369200224202"; then
    if [[ "${DISPLAY_STATE[$DISPLAY_EXTERNAL]}" == "connected" && -z "${DISPLAY_NATIVE[$DISPLAY_EXTERNAL]:-}" ]]
    then
        for _rate in 45 # retaining loop to allow easy addition of frequencies
        do
            _newmode="$(gtf 1920 1200 ${_rate}.00 | grep Modeline | sed "s/.*Modeline\s*\(.*\)/\1/")"
            _addmode="$(gtf 1920 1200 ${_rate}.00 | grep Modeline | sed "s/.*Modeline\s*\(\".*\"\).*/\1/")"
            eval xrandr --newmode $_newmode &>/dev/null || true
            eval xrandr --addmode $DISPLAY_EXTERNAL $_addmode &>/dev/null || true
        done
    fi
    APPLE_FIX=true
}

_Display_Multi_Output_External_Only ()
{
    _Display_State
    xrandr --output $DISPLAY_EXTERNAL --scale 1x1 --primary --auto --output $DISPLAY_INTERNAL --off
}

_Display_Multi_Output_Internal_Only ()
{
    _Display_State
    xrandr --output $DISPLAY_INTERNAL --scale 1x1 --primary --auto --output $DISPLAY_EXTERNAL --off
}

_Display_Multi_Output_External_Above ()
{
    _Display_State
    xrandr --output $DISPLAY_INTERNAL --scale 1x1 --auto --output $DISPLAY_EXTERNAL --scale 1x1 --primary --auto --above $DISPLAY_INTERNAL
}

_Display_Multi_Output_Scaled_Mirror ()
{
    _Display_State
    _internal_resolution="${DISPLAY_NATIVE[$DISPLAY_INTERNAL]}"
    _external_resolution="${DISPLAY_NATIVE[$DISPLAY_EXTERNAL]}"
    set -- $(echo $_internal_resolution | tr "x" " "); _internal_resolution_x="$1"; _internal_resolution_y="$2"
    set -- $(echo $_external_resolution | tr "x" " "); _external_resolution_x="$1"; _external_resolution_y="$2"
    _x_scaling="$(echo "scale=4; $_external_resolution_x/$_internal_resolution_x" | bc)"
    _y_scaling="$(echo "scale=4; $_external_resolution_y/$_internal_resolution_y" | bc)"
    _internal_cmd="--scale ${_x_scaling}x${_y_scaling}"
    _external_cmd="--same-as ${INTERNAL_DISPLAY} --primary"
    eval "xrandr --output $DISPLAY_INTERNAL $_internal_cmd --output $DISPLAY_EXTERNAL $_external_cmd"
}

# ----------------------------------------------------------------------
# Execute function based on command line parameters
# ----------------------------------------------------------------------

$*
