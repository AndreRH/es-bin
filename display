#!/bin/bash

# display management utility
# es@ethanschoonover.com

# ----------------------------------------------------------------------
# Source functions library
# ----------------------------------------------------------------------
# handles both symlinked and original script
# expects function file in same directory as script (or script target)

DEBUG=true
QUIET_SUCCESS=false
functions="$(dirname $(readlink -f $0))/functions"
[ -e "$functions" ] || functions=/usr/bin/functions
. "$functions"

# ----------------------------------------------------------------------
# Run as user, not root
# ----------------------------------------------------------------------
if Is_Root && [[ "${1:-}" != "recursive" ]] ; then
    As_User "display recursive $*"
    QUIET_SUCCESS=true
    exit
elif [[ "${1:-}" == "recursive" ]] && ! Is_Root; then
    shift; Set_Initial_Args "$*"
else
    : # running correctly as user, non recursive
fi


# ---------------------------------------------------------------------
# TODO
#touch $STATEROOT/display_xrandr_dump
#chmod a+rw $STATEROOT/display_xrandr_dump

# ---------------------------------------------------------------------
# Help
# ---------------------------------------------------------------------

Help ()
{
    echo -n "display internal | external | mirror [internal|external] "
    echo "| span [internal|external] | cycle";
    QUIET_SUCCESS=true; exit
}

# ---------------------------------------------------------------------
# Global variables
# ---------------------------------------------------------------------
# Order of preferred dislays when one winner has to be selected

PREFERRED_INTERNAL_DISPLAY_PREFIXES="LVDS DP HDMI VGA"
PREFERRED_EXTERNAL_DISPLAY_PREFIXES="DP HDMI VGA"


# ---------------------------------------------------------------------
# General helper functions
# ---------------------------------------------------------------------

In_List ()
{
    echo "$1" | grep -q "\b$2\b"
}

Fix_Struts ()
{
    systray
}

Cache_Xrandr ()
{
    [ "$*" != "refresh" ] || CACHED_XRANDR= # to force with 'refresh'
    [ -n "${CACHED_XRANDR:-}" ] || CACHED_XRANDR="$(xrandr -q)"
}

# ---------------------------------------------------------------------
# Functions to get state of displays
# ---------------------------------------------------------------------

Init_All_Displays ()
{
# optionally takes argument "refresh" to force refresh

    Cache_Xrandr ${1:-} # pass refresh on to Cache_Xrandr

    if [ -z "${ALL_DISPLAYS:-}" ]; then

        ALL_DISPLAYS="$(echo "$CACHED_XRANDR" \
        | awk '/.*connected/ {print $1}' | sort)"

        [ -n "${ALL_DISPLAYS:-}" ] \
        || Fail "Failed to find all displays"

    fi

}

Init_Connected_Displays ()
{
# optionally takes argument "refresh" to force refresh

    Cache_Xrandr ${1:-} # pass refresh on to Cache_Xrandr

    if [ -z "${CONNECTED_DISPLAYS:-}" ]; then

        CONNECTED_DISPLAYS="$(echo "$CACHED_XRANDR" \
        | awk '/ connected/ {print $1}' | sort)"

        [ -n "${CONNECTED_DISPLAYS:-}" ] \
        || Fail "Failed to find connected displays"

    fi
}

Init_Disconnected_Displays ()
{
# optionally takes argument "refresh" to force refresh

    Cache_Xrandr ${1:-} # pass refresh on to Cache_Xrandr

    if [ -z "${DISCONNECTED_DISPLAYS:-}" ]; then

        DISCONNECTED_DISPLAYS="$(echo "$CACHED_XRANDR" \
        | awk '/disconnected/ {print $1}' | sort)"

        [ -n "${DISCONNECTED_DISPLAYS:-}" ] \
        || Fail "Failed to find disconnected displays"

    fi
}

Init_Active_Displays ()
{
# optionally takes argument "refresh" to force refresh

    Cache_Xrandr ${1:-} # pass refresh on to Cache_Xrandr

    if [ -z "${ACTIVE_DISPLAYS:-}" ]; then
    while read _line; do
        if [[ "$_line" == [A-Z]* ]]; then 
            set -- $_line
            _source="$1" # LVDS1, DP1, etc
        else
            echo "$_line" | grep -q "[[:digit:]]\*" \
            && ACTIVE_DISPLAYS="${ACTIVE_DISPLAYS:-} $_source"
        fi
    done < <(xrandr -q 2>/dev/null | egrep -iv "^screen")
    fi
}

Init_Internal_Display ()
{
    Init_Connected_Displays
    if [ -z "${INTERNAL_DISPLAY:-}" ]; then
        for _prefix in $PREFERRED_INTERNAL_DISPLAY_PREFIXES; do
            for _connected_display in $CONNECTED_DISPLAYS; do
                if [[ $_connected_display == $_prefix* ]]; then
        	    INTERNAL_DISPLAY=$_connected_display; break
                fi
            done
            [ -n "${INTERNAL_DISPLAY:-}" ] && break
        done;
        [ -n "${INTERNAL_DISPLAY:-}" ] \
        || Fail "Failed to find internal display"
    fi
}

Init_External_Display ()
{
# EXTERNAL DISPLAY (possibly none, or primary external if more than one)

    Init_Connected_Displays
    if [ -z "${EXTERNAL_DISPLAY:-}" ]; then
        for _prefix in $PREFERRED_EXTERNAL_DISPLAY_PREFIXES; do
            for _connected_display in $CONNECTED_DISPLAYS; do
                if [[ $_connected_display == $_prefix* ]]; then
	            EXTERNAL_DISPLAY=$_connected_display; break
                fi
            done
            [ -z "${EXTERNAL_DISPLAY:-}" ] || break
        done
    fi
    [ -n "${EXTERNAL_DISPLAY:-}" ] || EXTERNAL_DISPLAY=""
}

Fix_Internal_If_Active ()
{
    power display
}

# ---------------------------------------------------------------------
# Functions to set display state
# ---------------------------------------------------------------------

Internal_Display ()
{
    Init_Internal_Display
    Single_Display $INTERNAL_DISPLAY
}

External_Display ()
{
    Init_External_Display
    [ -n "$EXTERNAL_DISPLAY" ] \
    && Single_Display $EXTERNAL_DISPLAY \
    || return 1
}

Single_Display ()
{
# Turn on selected display and turn off all other displays.
# Example: Single_Display DP1

    Init_All_Displays
    Init_Connected_Displays
    Init_Internal_Display
    Init_External_Display

    # possible this is being called with a null variable
    # -----------------------------------------------------------------
    [ -z "${1:-}" ] && return 1

    # make sure requested display is in the list of connected displays
    # -----------------------------------------------------------------
    In_List "$CONNECTED_DISPLAYS" "$1" || return 1

    # build up list of displays that aren't our target and prepare to
    # turn them off
    # -----------------------------------------------------------------
    for _disp in $ALL_DISPLAYS; do
        [[ $_disp != $1 && -n "$_disp" ]] \
        && _off="${_off:-}--output $_disp --off ";
    done

    # on, or off and then on
    # set out target display to primary, on, auto, native scale
    # and if that fails then attempt to do it again but separate the
    # display off / target display on steps (can address some failures)
    # first turning the target off in case of error
    # -----------------------------------------------------------------
    _cmdprefix="xrandr ${_off:-}--output $1"
    _cmdsuffix="--scale 1x1 --primary --auto"
    if ! $_cmdprefix $_cmdsuffix &>/dev/null; then
        $_cmdprefix --off &>/dev/null
        $_cmdprefix $_cmdsuffix &>/dev/null
    fi

    Fix_Struts
}

Mirror_Display ()
{
    Init_Internal_Display
    Init_External_Display
    Init_All_Displays
    Cache_Xrandr
    declare -Ag _NATIVE_RESOLUTION

    # requires at least one external display to be connected
    # -----------------------------------------------------------------
    [[ -z "$EXTERNAL_DISPLAY" ]] && return 1

    # calling this script in the format "display mirror internal"
    # anchors the mirror to the internal display,
    # and scaling the external display to match the internal, rather
    # than the default state of scaling to the external display
    # -----------------------------------------------------------------
    [[ "${1:-}" == "internal" ]] \
    && _MIRROR_PRIMARY="$INTERNAL_DISPLAY" \
       _MIRROR_SECONDARY="$EXTERNAL_DISPLAY" \
    || _MIRROR_PRIMARY="$EXTERNAL_DISPLAY" \
       _MIRROR_SECONDARY="$INTERNAL_DISPLAY"

    # get native resolution for each connected display
    # -----------------------------------------------------------------
    while read _line; do
        if [[ "$_line" == [A-Z]* ]]; then
            set -- $_line
            _source="$1" # LVDS1, DP1, etc
        else
            # extract native resolution from mode line
            if [[ -z "${_NATIVE_RESOLUTION[$_source]:-}" ]]; then
                set -- $_line
                declare -Ag _NATIVE_RESOLUTION[$_source]="$(echo "$1" \
                | sed "s/\([[:digit:]]*x[[:digit:]]*\)\?.*/\1/")"
            fi
        fi
    done < <(echo "$CACHED_XRANDR" | egrep -iv "^screen")

    eval _secondary_resolution="\${_NATIVE_RESOLUTION[$_MIRROR_SECONDARY]}"
    eval _primary_resolution="\${_NATIVE_RESOLUTION[$_MIRROR_PRIMARY]}"

    # extract x & y values, calculate scaling
    # -----------------------------------------------------------------

    set -- $(echo $_secondary_resolution | tr "x" " ")
    _secondary_resolution_x="$1"
    _secondary_resolution_y="$2"

    set -- $(echo $_primary_resolution | tr "x" " ")
    _primary_resolution_x="$1"
    _primary_resolution_y="$2"

    _x_scaling="$(echo "scale=4
    $_primary_resolution_x/$_secondary_resolution_x" | bc)"

    _y_scaling="$(echo "scale=4
    $_primary_resolution_y/$_secondary_resolution_y" | bc)"


    # prepare xrandr commands
    # -----------------------------------------------------------------
    _sec="--scale ${_x_scaling}x${_y_scaling} --auto"
    _pri="--same-as ${_MIRROR_SECONDARY} --scale 1x1 --primary --auto"

    # make sure to turn off other displays
    # -----------------------------------------------------------------
    for _d in $(echo $ALL_DISPLAYS | \
    sed "s/\s*\(${_MIRROR_PRIMARY}\|${_MIRROR_SECONDARY}\)\s*/ /g"); do
        _off="${_off:-}--output $_d --off "
    done

    # deal with occasional failure to switch
    # (e.g. from mirror external to mirror internal or vice versa)
    # -----------------------------------------------------------------
    # TODO: following will put internal into bad possible 
    # bad state on failure

    if ! xrandr ${_off:-} \
        --output $_MIRROR_SECONDARY $_sec \
        --output $_MIRROR_PRIMARY $_pri; then

        xrandr --output $_MIRROR_SECONDARY --off \
               --output $_MIRROR_PRIMARY --off

        xrandr ${_off:-}\
               --output $_MIRROR_SECONDARY $_sec \
               --output $_MIRROR_PRIMARY $_pri || \
        xrandr --output $_MIRROR_SECONDARY --auto \
               --output $_MIRROR_PRIMARY --off

    fi

    Fix_Struts

}

Span_Display ()
{

    # Initializations
    # -----------------------------------------------------------------

    Init_All_Displays
    Init_Internal_Display
    Init_External_Display
    Init_Connected_Displays
    Init_Disconnected_Displays
    
    # requires at least one external display
    # -----------------------------------------------------------------
    [[ -z "$EXTERNAL_DISPLAY" ]] && return 1;

    # Like mirroring, we can choose the internal display as an optional
    # primary display by appending the argument "internal" when
    # executing the script ('display span internal' instead of the
    # default 'display span'). 
    # -----------------------------------------------------------------

    [[ "${1:-}" == "internal" ]] \
    && _intprimary="--primary" _extprimary="" \
    || _intprimary="" _extprimary="--primary"

    # if it's connected and neither internal nor primary external
    # append to on cmd (on, not primary, above internal)
    # if it's not connected, append to off cmd
    # -----------------------------------------------------------------

    for _disp in $ALL_DISPLAYS; do

        if [[ "$INTERNAL_DISPLAY" != "$_disp" \
           && "$EXTERNAL_DISPLAY" != "$_disp" \
           && -n "$_disp" ]]; then
    
            #TODO: why am I checking $1 here/below in this function?
            In_List "$DISCONNECTED_DISPLAYS" "$_disp" \
            && [[ $_disp != ${1:-} ]] \
            && _off="${_off:-}--output $_disp --off "
    
            # DEBUG: switch to turning these off as welldue to problem 
            # with turning on extra displays 
            # e.g. "xrandr: cannot find crtc for output VGA1"
            # echo "$CONNECTED_DISPLAYS" | grep -q "\b$_disp\b" \
            # && [[ $_disp != ${1:-} ]] \
            # && _on="${_on:-}--output $_disp --scale 1x1 " \
            # && _on="${_on:-}--auto --above $INTERNAL_DISPLAY ";
    
            In_List "$CONNECTED_DISPLAYS" "$_disp" \
            && [[ $_disp != ${1:-} ]] \
            && _off="${_off:-}--output $_disp --off ";
    
        fi

    done

    # Execute xrandr command
    # -----------------------------------------------------------------

    eval "xrandr ${_off:-}${_on:-}\
          --output $INTERNAL_DISPLAY --scale 1x1 \
          ${_intprimary} --auto \
          --output $EXTERNAL_DISPLAY --scale 1x1 \
          ${_extprimary} --auto --above $INTERNAL_DISPLAY"

    Fix_Struts

}

Tablet_Mode ()
{
Init_Internal_Display
Init_External_Display
case $1 in
    on)
        Mirror_Display

        xrandr --output $INTERNAL_DISPLAY --rotate inverted
        for _device in $(xsetwacom --list devices | sed "s/.*id: \(..\).*$/\1/"); do xsetwacom --set $_device Rotate half; done

        if ! lsusb | grep -q "HHKB"; then # no external HHKB usb keyboard present

            # get internal display resolution (even if scaled)
            _xres=$(xrandr -q | grep "$INTERNAL_DISPLAY" \
            | sed "s/^$INTERNAL_DISPLAY connected \([[:digit:]]*\)x\([[:digit:]]*\).*$/\1/")

            # set on screen keyboard icon size and location
            [ $_xres -gt 1366 ] && _iconres=64 || _iconres=48
            _padding=10
            _menubar=20

            # raise or relocate
            if ! xdotool search --classname "onboard" &>/dev/null; then
                # didn't find onboard, so start it up
                eval 'onboard&'; sleep 2; xdotool search --classname "onboard" windowsize %@ $_iconres $_iconres windowmove %@ $(($_xres-$_iconres-$_padding)) $(( $_menubar + $_padding )); \
                xdotool search --classname "onboard" windowsize %@ $_iconres $_iconres windowmove %@ $(($_xres-$_iconres-$_padding)) $(( $_menubar + $_padding )); \
            else
                # onboard is present, so raise
                xdotool search --classname "onboard" windowsize %@ $_iconres $_iconres windowmove %@ $(($_xres-$_iconres-$_padding)) $(( $_menubar + $_padding )); \
            fi
    
        else # HHKB usb keyboard connected, so kill onscreen keyboard

            killall onboard

        fi

    ;;
    off)
        killall onboard
        xrandr --output $INTERNAL_DISPLAY --rotate normal
        for _device in $(xsetwacom --list devices | sed "s/.*id: \(..\).*$/\1/"); do xsetwacom --set $_device Rotate none; done
    ;;
    toggle)
        [[ "$(xrandr -q | awk '$1 ~ /LVDS1/ {print $4}')" == "inverted" ]] && Tablet_Mode off || Tablet_Mode on
    ;;
    auto)
        if [ "$(cat /sys/devices/platform/thinkpad_acpi/hotkey_tablet_mode)" -gt 0 ]; then
        echo "ON"
            Tablet_Mode on
        else
        echo "OFF"
            Tablet_Mode off
        fi
    ;;
esac
}

Simple_Cycle ()
{

    Init_Internal_Display
    Init_External_Display
    Init_Active_Displays

    if In_List "$ACTIVE_DISPLAYS" "$INTERNAL_DISPLAY"; then
        Single_Display $EXTERNAL_DISPLAY
    else
        Single_Display $INTERNAL_DISPLAY
    fi

}

Snapshot ()
{
    xrandr -q > /var/tmp/xrandr_dump
}

Matches_Snapshot ()
{
    Cache_Xrandr
    [ ! -e /var/tmp/xrandr_dump ] && return 1
    diff /var/tmp/xrandr_dump <(echo "$CACHED_XRANDR") && return 0 || return 1
}

Make_Safe ()
{
    Init_Internal_Display
    Matches_Snapshot || Single_Display $INTERNAL_DISPLAY
}

Kill_Zombies ()
{
    Init_Internal_Display
    Init_External_Display
# possible that we are in a state where our current display is no longer connected
# detect this and revert to internal or a known good display

    if ! Matches_Snapshot; then
# snapshot mismatch
# simple test
Single_Display $INTERNAL_DISPLAY
    else
:
          [[ -z $EXTERNAL_DISPLAY ]]
#          || Single_Display $EXTERNAL_DISPLAY \
#          || Single_Display $INTERNAL_DISPLAY
fi
}

case $1 in
    auto) Make_Safe ;;
    record) notify-send -u critical "RECORD CALLED" ;;
    external) External_Display ;;
    internal) Internal_Display ;;
    mirror) Mirror_Display ${2:-} ;;
    span) Span_Display ${2:-} ;;
    tablet) Tablet_Mode ${2:-}; ;;
    cycle) Simple_Cycle ;;
    consolelock) QUIET_SUCCESS=true; physlock -dsu $USER; ;;
    lock) QUIET_SUCCESS=true; As_User "xscreensaver-command -lock"; ;;
    darklock) QUIET_SUCCESS=true; As_User "xset dpms force off"; As_User "xscreensaver-command -lock"; ;;
    unlock) QUIET_SUCCESS=true; sleep 0.5; As_User "xscreensaver-command -deactivate &>/dev/null"; ;;
    reset) QUIET_SUCCESS=true; Fix_Struts; ;;
    *) Help
esac

Snapshot
