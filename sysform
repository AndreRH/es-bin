#!/bin/bash

#system
# |
# +--overlays (or just listed in a profile along with post run procedures)
# +--overlays.d
# +--packages

# TODO: consolidate into a single profile file
# rename overlays.d to just overlay
# need a custom function in the profile?

#system
# |
# +--overlay
# +--profile

DEBUG=true

# ----------------------------------------------------------------------
# DEFAULTS
# ----------------------------------------------------------------------
CMD=$(basename $0)
TEMP_PATH=/tmp/$CMD
CONFIG_FILENAME=config
OVERLAY_FILENAME=overlay
PACKAGES_FILENAME=packages
AUR_FILENAME=aur
OVERLAY_DIRNAME=overlay.d
DEFAULT_CONFIG_PATH="$XDG_CONFIG_HOME/$CMD/$HOSTNAME"
BACKUP_SUFFIX=".$CMD" #BACKUP_SUFFIX="$CMD-$(date +%F-%s)"
BACKUP_MODE=simple
LIB_DIR="$(dirname $0)/lib"
. $LIB_DIR/common

# ----------------------------------------------------------------------
# DECLARATIONS
# ----------------------------------------------------------------------
declare -A groups
declare -A packages_official_grouped_missing
declare -A packages_official_grouped_removed
declare -A packages_official
declare -A packages_aur
declare -A overlay_files
declare -A missing_official_from
declare -A missing_aur_from

# ----------------------------------------------------------------------
# COMMAND LINE OPTIONS, RUNTIME OPTION REPORT VALUES & HELP
# ----------------------------------------------------------------------
option_config_update=(
[key]="c"
[value_state]="false"
[value_ifset]="true"
[report]="running in report only mode (will report difference between system and config)"
[report_ifset]="update mode; $CMD will update config files (use with backup to preserve existing overlay files)"
[usage_summary]="Update configuration files in config directory. Can be used in conjunction with the backup option"
)
option_config_path=(
[key]="p"
[value_state]="$DEFAULT_CONFIG_PATH"
[value_ifset]=":path"
[report]="default config path used"
[report_ifset]="custom config path set"
[usage_summary]="Set custom config *directory* path. Default for this system is $DEFAULT_CONFIG_PATH"
)
option_backup=(
[key]="b"
[value_state]="false"
[value_ifset]="true"
[report]="backups off; files will be overwritten"
[report_ifset]="backups on; files will be saved in place with backup suffix"
[usage_summary]="Backup files when copying new file to existing path."
)
option_system_update=(
[key]="s"
[value_state]="false"
[value_ifset]="true"
[report]="system file conform off; no live system files will be written to during this procedure."
[report_ifset]="system file conform on; live system files *will* be overwritten, recommend using this with the backup option."
[usage_summary]="Update system files with current sysform config overlay files. Should be used with the backup option if you want to preserve existing files."
)
option_force=(
[key]="f"
[value_state]="false"
[value_ifset]="true"
[report]="force mode off; queries will be presented prior to file write operations."
[report_ifset]="force mode on; no queries will be presented; CAUTION"
[usage_summary]="Force all write operations; no queries will be given, use with caution and consider use of the backup option. Applies to both config and system updates."
)
option_git_update=(
[key]="g"
[value_state]="false"
[value_ifset]="true"
[report]="git update off; no git push after config update"
[report_ifset]="git update on; git push will occur after config update"
[usage_summary]="Git update; if sysform config directory being updated is a git repository, an automated git add, commit, and push will occur."
)
option_pacman_update=(
[key]="y"
[value_state]="false"
[value_ifset]="true"
[report]="do not update pacman repo db prior to running"
[report_ifset]="update pacman repo db prior to running"
[usage_summary]="pacman db update"
)

# ----------------------------------------------------------------------
# PROCESS OPTIONS
# ----------------------------------------------------------------------
process_opts
$(istrue $BACKUP) || BACKUP_MODE=none
if istrue $CONFIG_UPDATE && istrue $SYSTEM_UPDATE
then
    echo "Please select only one of -c / -s (config/system update)"
    exit 1
fi
if $(istrue $CONFIG_UPDATE) && $(istrue $FORCE)
then
    echo "WARNING: running in forced config update mode."
    echo "All config files will be replaced automatically."
    $(istrue $BACKUP) && echo "Backups will be created for all replaced files." \
    || echo "NO BACKUPS WILL BE CREATED; cancel and run $CMD again with the backup option as well to create backup files."
    $(query "Proceed?") || exit 0
fi

# ----------------------------------------------------------------------
# CONFIG DIRECTORY & FILE
# ----------------------------------------------------------------------
# config directory
progress "Checking config directory"
if [[ ! -d "$CONFIG_PATH" ]]
then
    if istrue $CONFIG_UPDATE; then
        mkdir -p "$CONFIG_PATH"
    else
        echo "No config directory present; run again in update mode to automatically create it at $CONFIG_PATH."
        usage
        exit 0
    fi
fi
# config file
[[ -f "$CONFIG_PATH/$CONFIG_FILENAME" ]] && source "$CONFIG_PATH/$CONFIG_FILENAME"

# ----------------------------------------------------------------------
# TEMP: "SOURCE" CONFIG
# ----------------------------------------------------------------------
progress "Sourcing config files"
_msg="not found; run $CMD in config update mode to create automatically."
$(istrue $CONFIG_UPDATE) && _msg="not found; will be created."
[[ -e $CONFIG_PATH/$CONFIG_FILENAME ]] && . $CONFIG_PATH/$CONFIG_FILENAME # NOT USED YET
for sourcefile in $PACKAGES_FILENAME $AUR_FILENAME $OVERLAY_FILENAME
do
    if [[ -e "$CONFIG_PATH/$sourcefile" ]]
    then
        . $CONFIG_PATH/$sourcefile
    else
        echo "$CONFIG_PATH/$sourcefile $_msg"
    fi
done

# ----------------------------------------------------------------------
# UPDATE PACKAGE DB
# ----------------------------------------------------------------------
if istrue $PACMAN_UPDATE
then
    progress "Updating pacman master package list"
    sudo pacman -Sy
fi

# ----------------------------------------------------------------------
# DETECT GROUPS
# ----------------------------------------------------------------------
groups[potential]=$(pacman -Qg | awk '{print $1}' | sort | uniq)
progress "Detecting installed groups"
if istrue $DEBUG
then
    groups[detected]="base base-devel xfce4 xorg xorg-apps xorg-drivers xorg-fonts" #DEBUG
else
    for groupname in ${groups[potential]}
    do
        # get percentage of group already installed
        # sort and uniq are required as there can be duplicate package reporting if 
        # testing repos are live, for instance
        #echo -n "Checking $groupname: "
        count_local=$(pacman -Qgq $groupname | sort | uniq | wc -l)
        count_repo=$(pacman -Sgq $groupname | sort | uniq | wc -l)
        threshold=12
        score=$(echo $((($count_repo*10)/$count_local)))
        #echo -n "$count_local of $count_repo installed "
        if [[ $score -le $threshold ]]
        then
            groups[detected]+="$groupname "
            echo -n "$groupname "
            #echo "(scored $score; marked INSTALLED)"
        else
            #echo "(scored $score)"
            :
        fi
    done
    echo
fi
report groups "FULLY INSTALLED GROUPS (DETECTED):"
report groups "${groups[detected]}\n"
groups[live]="${groups[detected]}"

# ----------------------------------------------------------------------
# GROUP STATE
# ----------------------------------------------------------------------
# group check
#echo -en "$HR\nPackage groups installed: "
#echo ${groups[live]} 
#echo
progress "Checking installed groups for new/removed packages"
for groupname in ${groups[live]}
do
    all_clear=true
    grouprepo="$(pacman -Sgq $groupname)"; grouplocal="$(pacman -Qgq $groupname)"
    packages_official_grouped_missing[$groupname]=$(compare "$grouprepo" "$grouplocal")
    packages_official_grouped_removed[$groupname]=$(compare "$grouplocal" "$grouprepo")
    if [[ -n ${packages_official_grouped_missing[$groupname]} ]]
    then
        report groups $groupname groups has new packages that can be installed: ${packages_official_grouped_missing[$groupname]}
        all_clear=false
    fi
    if [[ -n ${packages_official_grouped_removed[$groupname]} ]]
    then
        report groups $groupname groups has removed packages\; the following can be removed locally: ${packages_official_grouped_removed[$groupname]}
        all_clear=false
    fi
done
$(istrue $all_clear) && report groups "All group package lists are up to date"

# ----------------------------------------------------------------------
# PACKAGE STATE
# ----------------------------------------------------------------------
progress "Getting list of explicitly installed packages (official)"
packages_official[live]="$(compare "$(compare "$(pacman -Qeq)" "$(pacman -Qmq)")" "$(pacman -Qgq ${groups[live]})")"
progress "Getting list of explicitly installed packages (AUR)"
packages_aur[live]="$(common "$(pacman -Qeq)" "$(pacman -Qmq)")"
report packages "OFFICIAL PACKAGES (EXCL. DEPENDENCIES, NO GROUP PACKAGES):"
report packages ${packages_official[live]:-NONE}
report packages "\nAUR PACKAGES (EXCL. DEPENDENCIES):"
report packages ${packages_aur[live]:-NONE}

missing_official_from[system]="$(compare "${packages_official[file]}" "${packages_official[live]}")"
missing_official_from[config]="$(compare "${packages_official[live]}" "${packages_official[file]}")"
missing_aur_from[system]="$(compare "${packages_aur[file]}" "${packages_aur[live]}")"
missing_aur_from[config]="$(compare "${packages_aur[live]}" "${packages_aur[file]}")"
[[ -n ${missing_official_from[system]} ]] \
    && report packages "\nMISSING: The $CMD config includes the following packages that are not installed on the system:" \
    && report packages $(echo ${missing_official_from[system]})
[[ -n ${missing_official_from[config]} ]] \
    && report packages "\nMISSING: The system contains the following installed packages that are missing from your $CMD config:" \
    && report packages $(echo ${missing_official_from[config]})
[[ -n ${missing_aur_from[system]} ]] \
    && report packages "\nMISSING: The $CMD config includes the following AUR packages that are not installed on the system:" \
    && report packages $(echo ${missing_official_from[system]})
[[ -n ${missing_aur_from[config]} ]] \
    && report packages "\nMISSING: The system contains the following installed AUR packages that are missing from your $CMD config:" \
    && report packages $(echo ${missing_official_from[config]})

# ----------------------------------------------------------------------
# OVERLAY FILES STATE
# ----------------------------------------------------------------------
progress "Checking overlay files"
DEFAULT_ATTRIBS="644 root root"
_IFS=$IFS; IFS=$'\n'
for line in ${overlay_files[file]}
do
    _path=$(echo -n $line | awk '{print $1}')
    _attribs=$(echo -n $line | awk '{print $2,$3,$4}')
    [[ -e $_path ]] && _live_attribs=$(stat -c '%a %U %G' $_path)
    [[ -z $_attribs && -e $_path ]] && _attribs=$_live_attribs
    #TODO: may be better to not set default values in case of no current live file
    #[[ -z $_attribs ]] && _attribs=$DEFAULT_ATTRIBS
    overlay_files[reviewed]+="$_path $_attribs\n"
    [[ -e $_path ]] && overlay_files[live]+="$_path $_live_attribs\n" || overlay_files[live]+="$_path $_attribs\n"
    overlay_files[paths]+="$_path\n"
done
IFS=$_IFS
overlay_files[file]="$(echo -e "${overlay_files[reviewed]}" | sed '/^$/d')"
overlay_files[live]="$(echo -e "${overlay_files[live]}" | sed '/^$/d')"
overlay_files[paths]="$(echo -e "${overlay_files[paths]}" | sed '/^$/d')"
overlay_files[diff]="$(compare "${overlay_files[live]}" "${overlay_files[file]}")"
report overlay "Overlay file list:"
report overlay "${overlay_files[file]}"
if [[ -n ${overlay_files[diff]} ]]
then
    report overlay "\nOverlay file items that differ from the live system"
    report overlay "${overlay_files[diff]}"
fi

# ----------------------------------------------------------------------
# ACTION: CONFIG UPDATE
# ----------------------------------------------------------------------
if istrue $CONFIG_UPDATE
then
progress "Starting config update"
    if ! istrue $FORCE
    then
        echo -e "$HR\nWRITE WARNING:"
        echo $HR
        echo "The following files will be copied from the system to the config overlay directory ($CONFIG_PATH/$OVERLAY_DIRNAME)."
        echo
        echo "${overlay_files[paths]}"
        echo
        echo -n "Proceed? "
        $(query) || exit 0
    fi
    #TODO: offer diff report option, consider precheck diff

    _IFS=$IFS; IFS=$'\n'
    for line in ${overlay_files[live]}
    do
        _path=$(echo -n $line | awk '{print $1}')
        install -CD --backup=${BACKUP_MODE} -S${BACKUP_SUFFIX} "$_path" "$CONFIG_PATH/$OVERLAY_DIRNAME/${_path#/}"
        #TODO: we don't handle directories yet
    done
    IFS=$_IFS

    query_remove ()
    {
        local _package_name=$1
        local _package_list_name=$2
        $(istrue $FORCE) && PROCESS_ALL=D
        if [[ $PROCESS_ALL =~ ^[DS] ]]
        then
            response=$PROCESS_ALL
        else
            echo -e "\n$_package_name: DELETE from the config package list or SKIP?"
            read -p "delete/skip | d/s this | D/S all : " response
        fi
        case $response in
            [dD]*)
                eval $_package_list_name=\"\$\(compare \"\${$_package_list_name}\" $_package_name\)\"
                echo "$_package_name removed from config overlay list."
            ;;
            *)
                echo "$_package_name skipped (remains in config overlay list)."
            ;;
        esac
        PROCESS_ALL=$response
    }
    query_add ()
    {
        local _package_name=$1
        local _package_list_name=$2
        $(istrue $FORCE) && PROCESS_ALL=A
        if [[ $PROCESS_ALL =~ ^[AS] ]]
        then
            response=$PROCESS_ALL
        else
            echo -e "\n$_package_name: ADD this package to the config package list or skip?"
            read -p "add/skip | a/s this | A/S all : " response
        fi
        case $response in
            [aA]*)
                eval $_package_list_name=\"\$\(echo -e \"\${$_package_list_name}\\n$_package_name\" \| sort \| uniq\)\";
                echo "$_package_name added to config overlay list."
            ;;
            *)
                echo "$_package_name skipped (not added to config overlay list)."
            ;;
        esac
        PROCESS_ALL=$response
    }

    if [[ -n ${missing_official_from[system]} ]]
    then
        echo -e "\nMISSING FROM SYSTEM: The $CMD config includes the following packages that are not installed on the system. If you choose to KEEP these packages in your config package list, you can automatically install them to your system by running $CMD again in system update mode."
        echo $(echo ${missing_official_from[system]})
        PROCESS_ALL=
        for _package in $(echo ${missing_official_from[system]})
        do
            query_remove "$_package" "packages_official[file]"
        done
    fi
    if [[ -n ${missing_official_from[config]} ]]
    then
        echo -e "\nMISSING PACKAGES FROM CONFIG: The system contains the following installed packages that are missing from your $CMD config. If you choose not to add them to your config file, you can remove them from your system by running $CMD in system update mode."
        echo $(echo ${missing_official_from[config]})
        PROCESS_ALL=
        for _package in $(echo ${missing_official_from[config]})
        do
            query_add "$_package" "packages_official[file]"
        done
    fi
    if [[ -n ${missing_aur_from[system]} ]]
    then
        echo -e "\nMISSING AUR FROM SYSTEM: The $CMD config includes the following AUR packages that are not installed on the system. If you choose to KEEP these AUR packages in your config package list, you can automatically install them to your system by running $CMD again in system update mode."
        echo $(echo ${missing_aur_from[system]})
        PROCESS_ALL=
        for _package in $(echo ${missing_aur_from[system]})
        do
            query_remove "$_package" "packages_aur[file]"
        done
    fi
    if [[ -n ${missing_aur_from[config]} ]]
    then
        echo -e "\nMISSING AUR FROM CONFIG: The system contains the following installed AUR packages that are missing from your $CMD config. If you choose not to add them to your config file, you can remove them from your system by running $CMD in system update mode."
        echo $(echo ${missing_aur_from[config]})
        PROCESS_ALL=
        for _package in $(echo ${missing_aur_from[config]})
        do
            query_add "$_package" "packages_aur[file]"
        done
    fi

    rm -rf $TEMP_PATH; mkdir $TEMP_PATH

    echo "overlay <<EOF" > $TEMP_PATH/$OVERLAY_FILENAME
    echo "${overlay_files[live]}" >> $TEMP_PATH/$OVERLAY_FILENAME
    echo "EOF" >> $TEMP_PATH/$OVERLAY_FILENAME

    echo "packages <<EOF" > $TEMP_PATH/$PACKAGES_FILENAME
    echo ${packages_official[file]} >> $TEMP_PATH/$PACKAGES_FILENAME
    echo "EOF" >> $TEMP_PATH/$PACKAGES_FILENAME

    echo "aur <<EOF" > $TEMP_PATH/$AUR_FILENAME
    echo ${packages_aur[file]} >> $TEMP_PATH/$AUR_FILENAME
    echo "EOF" >> $TEMP_PATH/$AUR_FILENAME

    for _filename in $OVERLAY_FILENAME $PACKAGES_FILENAME $AUR_FILENAME
    do
        install -CD --backup=${BACKUP_MODE} -S${BACKUP_SUFFIX} "$TEMP_PATH/$_filename" "$CONFIG_PATH/$_filename"
        report update_config "Updated overlay file: $CONFIG_PATH/$_filename"
    done

    progress "Config update complete"

fi

# ----------------------------------------------------------------------
# ACTION: SYSTEM UPDATE
# ----------------------------------------------------------------------
if istrue $SYSTEM_UPDATE
then
progress "Starting system update"
#PACKAGES
    query_install ()
    {
        local _package_name=$1
        $(istrue $FORCE) && PROCESS_ALL=I
        if [[ $PROCESS_ALL =~ ^[IS] ]]
        then
            response=$PROCESS_ALL
        else
            echo -e "\n$_package_name: INSTALL this package or SKIP?"
            read -p "install/skip | i/s this | I/S all : " response
        fi
        case $response in
            [iI]*)
                yaourt -S --noconfirm $_package_name && echo "$_package_name installed." \
                || echo "ERROR during installaiton of $_package_name."
            ;;
            *)
                echo "$_package_name skipped (not installed)."
            ;;
        esac
        PROCESS_ALL=$response
    }
    query_uninstall ()
    {
        local _package_name=$1
        local _package_listname=$2
        $(istrue $FORCE) && PROCESS_ALL=U
        if [[ $PROCESS_ALL =~ ^[US] ]]
        then
            response=$PROCESS_ALL
        else
            echo -e "\n$_package_name: UNINSTALL this package or SKIP?"
            read -p "uninstall/skip | u/s this | U/S all : " response
        fi
        case $response in
            [aA]*)
                yaourt -R --noconfirm $_package_name && echo "$_package_name removed from system." \
                || echo "ERROR during removal of $_package_name."
            ;;
            *)
                echo "$_package_name skipped (not removed from system)."
            ;;
        esac
        PROCESS_ALL=$response
    }

    if [[ -n ${missing_official_from[system]} ]]
    then
        echo -e "\nMISSING PACKAGES FROM SYSTEM: The $CMD config includes the following packages that are not installed on the system. If you choose to skip installation and wish to remove them from your config, run $CMD again in config update mode."
        echo $(echo ${missing_official_from[system]})
        PROCESS_ALL=
        for _package in $(echo ${missing_official_from[system]})
        do
            query_install "$_package"
        done
    fi
    if [[ -n ${missing_official_from[config]} ]]
    then
        echo -e "\nMISSING PACKAGES FROM CONFIG: The system contains the following installed packages that are missing from your $CMD config. If you choose to skip uninstallation you can add them to your config by running $CMD again in config update mode."
        echo $(echo ${missing_official_from[config]})
        PROCESS_ALL=
        for _package in $(echo ${missing_official_from[config]})
        do
            query_uninstall "$_package"
        done
    fi
    if [[ -n ${missing_aur_from[system]} ]]
    then
        echo -e "\nMISSING AUR FROM SYSTEM: The $CMD config includes the following AUR packages that are not installed on the system. If you choose to skip installation and wish to remove them from your config, run $CMD again in config update mode."
        echo $(echo ${missing_aur_from[system]})
        PROCESS_ALL=
        for _package in $(echo ${missing_aur_from[system]})
        do
            query_install "$_package"
        done
    fi
    if [[ -n ${missing_aur_from[config]} ]]
    then
        echo -e "\nMISSING AUR FROM CONFIG: The system contains the following installed AUR packages that are missing from your $CMD config. If you choose to skip uninstallation you can add them to your config by running $CMD again in config update mode."
        echo $(echo ${missing_aur_from[config]})
        PROCESS_ALL=
        for _package in $(echo ${missing_aur_from[config]})
        do
            query_uninstall "$_package"
        done
    fi

    for groupname in ${groups[live]}
    do
        if [[ -n ${packages_official_grouped_missing[$groupname]} ]]
        then
            PROCESS_ALL=
            echo -e "\nGROUP HAS NEW PACKAGES: The $groupname package group has added new packages ($(echo ${packages_official_grouped_missing[$groupname]})). If you install these new packages, run $CMD again in config update mode to add them to your config as well."
            for _package in $(echo ${packages_official_grouped_missing[$groupname]})
            do
                query_install "$_package"
            done
        fi
        if [[ -n ${packages_official_grouped_removed[$groupname]} ]]
        then
            PROCESS_ALL=
            echo -e "\nGROUP HAS REMOVED PACKAGES: The $groupname package group has removed previously included packages ($(echo ${packages_official_grouped_removed[$groupname]})). If you remove these new packages, run $CMD again in config update mode to remove them from your config as well."
            for _package in $(echo ${packages_official_grouped_removed[$groupname]})
            do
                query_uninstall "$_package"
            done
        fi
    done

#OVERLAY
    if ! istrue $FORCE
    then
        echo -e "$HR\nWRITE WARNING:"
        echo $HR
        echo "The following files will be copied from the config overlay directory ($CONFIG_PATH/$OVERLAY_DIRNAME) to the live system:"
        echo
        echo "${overlay_files[paths]}"
        echo
        echo -n "Proceed? "
        $(query) || exit 0
    fi
    _IFS=$IFS; IFS=$'\n'
    for line in ${overlay_files[file]}
    do
        _path=$(echo -n $line | awk '{print $1}')
        _perms=$(echo -n $line | awk '{print $2}')
        _owner=$(echo -n $line | awk '{print $3}')
        _group=$(echo -n $line | awk '{print $4}')
        install -CD --backup=${BACKUP_MODE} -S${BACKUP_SUFFIX} -g${_group} -o${_owner} -m${_mode} "$CONFIG_PATH/$OVERLAY_DIRNAME/${_path#/}" "$_path"
    done
    IFS=$_IFS

regen

progress "System update complete"

fi

# ----------------------------------------------------------------------
# ACTION: REPORT
# ----------------------------------------------------------------------
if ! istrue $CONFIG_UPDATE && ! istrue $SYSTEM_UPDATE
then
#${overlay_files[file]}
#${overlay_files[live]}
#${packages_official[live]}
#${packages_aur[live]}
#${packages_official[file]}
#${packages_aur[file]}
#${missing_official_from[system]}
#${missing_official_from[config]}
#${missing_aur_from[system]}
#${missing_aur_from[config]}
#${groups[live]}
echo -e "$HR\nGROUPS\n"
echo -e "${REPORT[groups]}"
echo -e "$HR\nPACKAGES\n"
echo -e "${REPORT[packages]}"
echo -e "$HR\nOVERLAY\n"
echo -e "${REPORT[overlay]}"
fi

# ----------------------------------------------------------------------
# REGEN
# ----------------------------------------------------------------------
# can override in a config file






# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------

# install yaourt

# reinstall config files

# final regen of any required files (mkinicpio, grub2, etc.)

# git commit & push on update? -g option?
