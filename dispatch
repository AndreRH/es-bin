#!/bin/bash

# handles all hardware related events (acpi, udev) and can be called to execute 
# hardware related actions (from a window manager for example)
#
# can be triggered by udev rules, acpi events, wm scripts, cron, etc.

# ----------------------------------------------------------------------
# Globals
# ----------------------------------------------------------------------

# buckle up
#set -o errexit
set -o nounset

# to retain state over reboots
STATEROOT=/var/tmp

# to taste
MIN_BACKLIGHT_PERCENT=80
MAX_BACKLIGHT_PERCENT=100

# TODO: note here now to locate these
VIDEOPATH=/sys/class/backlight/acpi_video0
INTERNAL_DISPLAY=LVDS1

# audio mode
ALSA=true # false if pulse

# ----------------------------------------------------------------------
# Find User & Environment Variables
# ----------------------------------------------------------------------
# if running as root we need to get some user environment vars

ROOTMODE=false
PREFIX="eval"
if [[ -z ${USER:-} ]]; then
    ROOTMODE=true
    for _windowmanager in xmonad xfce bash zsh; # in console uses bash/zsh login
    do _pid=$(pgrep -o $_windowmanager) && break; done
    for _envvar in USER XAUTHORITY DISPLAY DBUS_SESSION_BUS_ADDRESS;
    do eval export $(grep -z ^$_envvar /proc/$_pid/environ); done
fi

# ----------------------------------------------------------------------
# System Action Functions
# ----------------------------------------------------------------------

system ()
{
    # it's possible that these should just be top level, e.g. "execute sleep"
    case $1 in
        sleep)
            echo -n mem >/sys/power/state;
            # following post resume
            power auto; sleep 5; display auto; Notify "AWAKE"; ;;
        poweroff|off|shutdown) power max; poweroff ;;
        reboot|restart) power max; reboot ;;
        hibernate) return ;; # TODO: encrypted swap hibernate support
        boot) wireless restore; power auto; ;;
        xboot) display auto; ;;
        consolelock) physlock -dsu $USER ;;
        lock) xscreensaver-command -lock ;;
        unlock) xscreensaver-command -deactivate ;;
    esac
}

power ()
{
    case $1 in
        auto)
            # based on AC connection status
            [[ $(cat /sys/class/power_supply/AC/online) > 0 ]] \
            && power max || power min; return ;;
        toggle)
            _mode=(min max); _state=$(cat $STATEROOT/power)
            [[ $_state == "${_mode[0]}" ]] && power ${_mode[1]} && return
            power ${_mode[0]}; return
            ;;
        cycle)
            _mode=(min med max mov); _state=$(cat $STATEROOT/power)
            for _s in $(seq 0 $((${#_mode[@]} - 1)))
            do echo $_s; [[ ${_state:-} == ${_mode[$_s]} ]] \
            && power ${_mode[$(( ++_s % ${#_mode[@]} ))]} && return; done
            power auto; return
            ;;
        min)
            nmi_watchdog=false
            cpu_powersave=true
            display_powersave=true
            powersave_bus=true
            powersave_wacom=true
            disk_powersave=true
            wifi_powersave=true
            pcie_aspm_powersave=true
            soundcard_powersave=true
            kernel_write_powersave=true
            dpms_seconds=60
            backlight_percent=75
            ;;
        med)
            cpu_powersave=true
            display_powersave=true
            powersave_bus=true
            wifi_powersave=true
            pcie_aspm_powersave=true
            soundcard_powersave=true
            nmi_watchdog=false
            powersave_wacom=false
            disk_powersave=false
            kernel_write_powersave=false
            dpms_seconds=60
            backlight_percent=75
            ;;
        max)
            nmi_watchdog=true
            cpu_powersave=false
            display_powersave=false
            powersave_bus=false
            powersave_wacom=false
            disk_powersave=false
            wifi_powersave=false
            pcie_aspm_powersave=false
            soundcard_powersave=false
            kernel_write_powersave=false
            dpms_seconds=600
            backlight_percent=100
            ;;
        mov)
            nmi_watchdog=true
            cpu_powersave=false
            display_powersave=false
            powersave_bus=false
            powersave_wacom=false
            disk_powersave=false
            wifi_powersave=false
            pcie_aspm_powersave=false
            soundcard_powersave=false
            kernel_write_powersave=false
            dpms_seconds=600
            backlight_percent=100
            ;;
        *) return ;;
    esac

    # c.f. https://lesswatts.org/tips

    # DISPLAY ---------------------------------------------------------

    mode=$1 # e.g. min, max

    # DISPLAY ---------------------------------------------------------

    current_brightness=$(cat $VIDEOPATH/actual_brightness)
    full_brightness=$(cat $VIDEOPATH/max_brightness)
    new_brightness=$(((${backlight_percent}*${full_brightness})/100))
    [[ $current_brightness -gt $new_brightness ]] && _sign="-"
    for _b in $(seq $current_brightness ${_sign:-}1 $new_brightness)
    do sudo echo -n $_b > $VIDEOPATH/brightness; sleep 0.015; done

    $display_powersave && _rc6=1 _fbc=1 || _rc6=0 _fbc=-1
    _param_root="/sys/module/i915/parameters/"
    for _param_set in "i915_enable_rc6 $_rc6" "i915_enable_fbc $_fbc"; do
        set $_param_set; _param=$1 _paramval=$2
        [ "$(stat --format "%a" "${_param_root}${_param}")" -ge 600 ] && sudo echo -n $_paramval > "${_param_root}${_param}"
    done

    xset dpms 0 0 $dpms_seconds &>/dev/null

    # PCIE_ASPM -------------------------------------------------------
    # default|performance|powersave
    $pcie_aspm_powersave && _pcie_aspm=powersave || _pcie_aspm=performance
    sudo echo -n $_pcie_aspm > "/sys/module/pcie_aspm/parameters/policy"

    # BUS -------------------------------------------------------------
    $powersave_bus && _bus=auto || _bus=on
    $powersave_wacom && _wacom=auto || _wacom=on
    for _path in /sys/bus/*/devices/*; do
       _pwr=$_bus; [[ -f "$_path/manufacturer" && "$(cat "$_path/manufacturer")" == "Tablet" ]] && _pwr=$_wacom
       [[ -f "$_path/power/control" ]] && sudo echo -n $_pwr > "$_path/power/control"
    done

    # CPU -------------------------------------------------------------
    # powersave | ondemand | performance
    # check with `cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors`
    # check current with `cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor`
    # useful: https://wiki.archlinux.org/index.php/User:Stefanwilkens
    # sched values:
    # 0 - No power saving load balance (default value)
    # 1 - Fill one thread/core/package first for long running threads
    # 2 - Also bias task wakeups to semi-idle cpu package for power savings
    $cpu_powersave && _governor=powersave _sched=2 _perfbias=15 || _governor=performance _sched=0 _perfbias=0
    # cpu governor
    sudo cpupower -c all frequency-set -g $_governor &>/dev/null
    # cpu performance bias
    sudo cpupower -c all set -b $_perfbias &>/dev/null
    # multi-core scheduler power saving
    sudo cpupower -c all set --sched-mc $_sched # &>/dev/null
    sudo cpupower -c all set --sched-smt $_sched # &>/dev/null

    # WIFI ------------------------------------------------------------
    $wifi_powersave && _wifi=on _wifipwr=Y || _wifi=off _wifipwr=N;
    sudo iw dev wlan0 set power_save $_wifi &>/dev/null
    # HANDLED IN /etc/modprobe.d/iwlwifi.conf now # sudo echo -n $_wifipwr > /sys/module/iwlwifi/parameters/power_save

    # KERNEL WRITE MODES ----------------------------------------------
    # TODO: consider increasing writeback to > 1500
    if $kernel_write_powersave; then
        sudo sysctl -q vm.laptop_mode=5 \
            vm.dirty_ratio=60 \
            vm.dirty_background_ratio=40 \
            vm.dirty_expire_centisecs=3000 \
            vm.dirty_writeback_centisecs=1500
    else
        sudo sysctl -q vm.laptop_mode=0 \
            vm.dirty_ratio=10 \
            vm.dirty_background_ratio=5 \
            vm.dirty_expire_centisecs=3000 \
            vm.dirty_writeback_centisecs=500
    fi

    # SOUND CARD --------------------------------------------------------
    $soundcard_powersave && _snd=1 _sndcnt=Y || _snd=0 _sndcnt=N
    sudo echo -n $_snd > /sys/module/snd_hda_intel/parameters/power_save
    sudo echo -n $_sndcnt > /sys/module/snd_hda_intel/parameters/power_save_controller

    # DISK POWERSAVING ------------------------------------------------
    # aggressive disk powersave after 60 sec
    # -B 1=maximum power saving / 254=no power saving
    # -S 12=spin down after 60 seconds / 0=no spin down
    $disk_powersave && _B=1 _S=12 _scsipwr=min_power || _B=254 _S=0 _scsipwr=max_performance
    for _disk in /dev/sd?; do sudo hdparm -i $_disk | egrep -i -q "AdvancedPM\s*=\s*yes" && sudo hdparm -B $_B -S $_S $_disk &>/dev/null || true; done
    for _scsi in /sys/class/scsi_host/*/link_power_management_policy; do sudo echo -n $_scsipwr > "$_scsi"; done
    # TODO: consider adding blockdev --setra value for readahead control?

    # NMI WATCHDOG ----------------------------------------------------
    $nmi_watchdog && _nmi=1 || _nmi=0; sudo sysctl -q kernel.nmi_watchdog=$_nmi

    # RECORD STATE ----------------------------------------------------
    sudo echo -n $1 > $STATEROOT/power

    Notify "$1 power mode"

}

wifi ()
{
    case $* in
        toggle) rfkill list wifi | egrep -iq "soft.*yes" && wifi off || wifi on ;;
        on) rfkill unblock wifi && ip link set wlan0 up; Notify "wifi on" && echo -n on > $STATEROOT/wifi ;;
        off) rfkill block wifi && Notify "wifi off" && echo -n off > $STATEROOT/wifi ;;
        restore)
            [[ -f "$STATEROOT/wifi" ]] && [[ -n "$(cat "$STATEROOT/wifi")" ]] && _state=$(cat "$STATEROOT/wifi")
            wifi ${_state:-on}
            ;;
    esac
}

bluetooth ()
{
    case $* in
        toggle) rfkill list bluetooth | egrep -iq "soft.*yes" && bluetooth on || bluetooth off ;;
        on) rfkill unblock bluetooth && echo -n on > $STATEROOT/bluetooth ;;
        off) rfkill block bluetooth && echo -n off > $STATEROOT/bluetooth ;;
        restore)
            [[ -f "$STATEROOT/bluetooth" ]] && [[ -n "$(cat "$STATEROOT/bluetooth")" ]] && _state=$(cat "$STATEROOT/bluetooth")
            bluetooth ${_state:-on}
            ;;
    esac
}

# both wifi and bluetooth
wireless ()
{
    case $* in
        toggle) bluetooth toggle; wifi toggle ;;
        on) bluetooth on; wifi on ;;
        off) bluetooth off; wifi off ;;
        restore) bluetooth restore; wifi restore ;;
    esac
}

volume ()
{
    _adj=1 # used if no value supplied, e.g. volume up OR volume up 10
    case $1 in
        up) $ALSA && amixer set Master ${2:-$_adj}%+ unmute -q || /usr/bin/pamixer --increase $_adj --unmute ;;
        mid) $ALSA && amixer set Master 75% unmute -q || true ;;
        max) $ALSA && amixer set Master 100% unmute -q || true ;;
        down) $ALSA && amixer set Master ${2:-$_adj}%- unmute -q || /usr/bin/pamixer --decrease $_adj --unmute ;;
        mute) $ALSA && amixer set Master mute -q || /usr/bin/pamixer --mute ;;
        unmute) $ALSA && amixer set Master unmute -q || /usr/bin/pamixer --unmute ;;
        toggle) if $ALSA; then amixer set Master toggle -q :; else $(/usr/bin/pamixer --get-mute) && volume unmute || volume mute; fi  ;;
        mic) 
            case $2 in
	    mute) $ALSA && amixer set Capture mute -q || pamixer set Capture mute -q ;;
            unmute) $ALSA && amixer set Capture unmute -q ;;
            toggle) $ALSA && amixer set Capture toggle -q ;;
            esac
            ;;
    esac
}

media ()
{
    case $1 in
        mount) ;;
        eject) ;;
    esac
}

indicator ()
{
    case $* in
        beep) ;;
        led\ blink\ on) ;;
        led\ blink\ off) ;;
        leds\ off) ;;
        leds\ on) ;;
    esac
}

input ()
{
    case $* in
        trackpad_toggle) ;;
        wacom_toggle) ;;
    esac
}

display ()
{
    logger "IN DISPLAY WITH $*"
    case $* in

        auto) _Display_Check_Cycle; return ;;
        cycle) Notify "Display Cycle"; _Display_Check_Cycle; return ;;

        rotate) ;;
        rotate_external) ;;
        rotate_internal) ;;
        invert) ;;
        tablet) ;; # tablet mode
        laptop) ;; # laptop mode

        annotate) ;;
        screenshot) ;;

        mode_cycle) return ;; #_Display_Check_Cycle; return ;;

        external) Notify "Display External"; _Display_Multi_Output_External_Only; return ;;
        internal) Notify "Display Internal"; _Display_Multi_Output_Internal_Only; return ;;
        mirror) Notify "Display Mirror"; _Display_Multi_Output_Scaled_Mirror; return ;;

        #brightness_up) ;;
        #brightness_down) ;;

        #suspend_on) ;;
        #suspend_off) ;;
        #suspend_now) ;;

        #screensaver\ on) ;;
        #screensaver\ off) ;;
        #screensaver\ now) ;;

    esac
}

# ----------------------------------------------------------------------
# Utility Functions
# ----------------------------------------------------------------------

_Log () { logger "SYSTEM ACTION: $* (${FUNCNAME[1]})"; }

if [[ -n $ROOTMODE ]]
then
    Notify () { logger "$*"; su ${USER:-} -c "notify-send \"$*\""; }
else
    Notify () { logger "$*"; notify-send "$*"; }
fi

_Is_True () {
    shopt -s nocasematch;
    case ${1:-} in 1|y|yes|on|true) return 0 ;; *) return 1 ;; esac;
    shopt -u nocasematch;
}

_Debug ()
{
    # quick debug function, better info than "caller"
    # called without parameters at top of function; reports where it was called 
    # from (calling function and line number)
    [[ ${1:-} ]] && local with_args=" with arguments \"$@\"" || local with_args=""
    echo "FUNCTION: ${FUNCNAME[1]}() line ${BASH_LINENO[0]} called by ${FUNCNAME[2]}${with_args} at line ${BASH_LINENO[1]}"
}

declare -ag _notifications=()
_Add_Notification ()
{
    declare -ag _notifications[${#_notifications[*]}]="$*"
}
_Display_Notifications ()
{
    for _notification in "${_notifications[@]:-}"; do Notify "$_notification"; done
}

# ----------------------------------------------------------------------
# Library Functions
# ----------------------------------------------------------------------

_Restart_Xmonad ()
{
    xdotool key alt+q # initiate an xmonad restart, mostly for trayer
    sleep 0.5
}

# display related globals
declare -ag CONNECTED=()
declare -ag CONNECTED_ACTIVE=()
declare -ag CONNECTED_INACTIVE=()
declare -ag DISCONNECTED=()
declare -ag DISCONNECTED_ACTIVE=() # Zombies
declare -ag DISCONNECTED_INACTIVE=()
declare -Ag DISPLAY_STATEROOT
declare -Ag DISPLAY_CURRENT
declare -Ag DISPLAY_NATIVE
declare -g APPLE_FIX=

_Display_State ()
{
    # per display values; example:
    # DISPLAY_STATEROOT[LVDS1]=connected
    # DISPLAY_CURRENT[LVDS1]=1366x768
    # DISPLAY_NATIVE[LVDS1]=1366x768

    [[ -n "${DISPLAY_STATEROOT[*]:-}" ]] && return # we've already set display state

    # simple arrays of connected/disconnected displays

    DISPLAY_INTERNAL=LVDS1
    DISPLAY_EXTERNAL=

    while read _line; do
        if [[ "$_line" == [A-Z]* ]]; then # any line with initial Alpha

            set -- $_line
            _source="$1" # LVDS1, DP1, etc
            declare -Ag DISPLAY_STATEROOT[$_source]="$2"
            declare -Ag DISPLAY_CURRENT[$_source]="$(echo "$3" | sed "s/\([[:digit:]]*x[[:digit:]]*\)\?.*/\1/")"

            if [[ "${DISPLAY_STATEROOT[$_source]}" == "connected" ]]; then

                declare -ag CONNECTED[${#CONNECTED[*]}]="$_source"
                [[ "$_source" != "${DISPLAY_INTERNAL}" ]] && DISPLAY_EXTERNAL=$_source # easily expanded to multiple displays as array

                if [[ -n ${DISPLAY_CURRENT[$_source]} ]]; then
                    declare -ag CONNECTED_ACTIVE[${#CONNECTED_ACTIVE[*]}]="$_source"
                else
                    declare -ag CONNECTED_INACTIVE[${#CONNECTED_INACTIVE[*]}]="$_source"
                fi

            else
                declare -ag DISCONNECTED[${#DISCONNECTED[*]}]="$_source"
                if [[ -n ${DISPLAY_CURRENT[$_source]} ]]; then
                    # zombie displays; configured but no longer connected
                    declare -ag DISCONNECTED_ACTIVE[${#DISCONNECTED_ACTIVE[*]}]="$_source"
                else
                    declare -ag DISCONNECTED_INACTIVE[${#DISCONNECTED_INACTIVE[*]}]="$_source"
                fi
            fi

        else

            # extract native resolution from mode line
            if [[ -z "${DISPLAY_NATIVE[$_source]:-}" ]]; then
                set -- $_line
                #declare -Ag DISPLAY_NATIVE[$_source]="$1"
                declare -Ag DISPLAY_NATIVE[$_source]="$(echo "$1" | sed "s/\([[:digit:]]*x[[:digit:]]*\)\?.*/\1/")"
            fi

        fi

    done < <(xrandr 2>/dev/null | egrep -iv "^screen")

}

keyboard ()
{
    if ! xdotool search --classname "onboard" &>/dev/null;then
        onboard &
        sleep 1
        xdotool search --classname "onboard" windowsize %@ 48 48 windowmove %@ 1308 30
    else
        xdotool search --classname "onboard" windowraise %@
    fi
}

_Display_Kill_Zombies ()
{
    _Display_State
    [[ -n ${DISCONNECTED_ACTIVE[@]:-} ]] && xrandr --auto || true
}

_Display_Check_Cycle ()
{
    _Display_State
    _display_change=

    _Display_Kill_Zombies

    if [[ -z $DISPLAY_EXTERNAL ]] && [[ -f "$STATEROOT/display" ]] && grep -iq "multi" "$STATEROOT/display"
    #if [[ -n ${DISCONNECTED_ACTIVE[@]:-} ]]
    then
    # only internal dispaly, make sure we are set to primary, non scaled display mode.
    # TODO: cycle through preferred internal display modes (rotations?)
        _xrandr_cmd_internal+="--output $DISPLAY_INTERNAL --primary --scale 1x1 --auto"
        xrandr $_xrandr_cmd_internal
        _display_change=true
        _Add_Notification "Single display mode"
        [[ -e "$STATEROOT/display" ]] && rm "$STATEROOT/display"
    elif [[ -n $DISPLAY_EXTERNAL ]]
    then
    # we have an external display, let's check it and find out if it's an apple 
    # display and properly configured or if it's a normal display. Then check 
    # to see if we are outputing to it in our preferred mode. If we have 
    # multiple preferred modes, cycle through them.
    #
    # TODO: possible state is that an apple display was unplugged during sleep 
    # and a non apple display was connected prior to system wakeup. need to 
    # test whether the display is properly configured (the forced apple mode 
    # line is automatically removed) and whether we need to change the output 
    # settings, resolution for the new display...

        _Display_Apple_Fix

        # display modes for use with external display
        _display_modes=("multi output external only"
                        "multi output scaled mirror"
                        "multi output external above"
                        "multi output internal only")

        if [[ ! -f "$STATEROOT/display" ]] || [[ -z "$(cat "$STATEROOT/display")" ]]
        then
            _display_current_mode="${_display_modes[0]}"
        else
            _display_current_mode="$(cat $STATEROOT/display)"
        fi
        for _s in $(seq 0 $((${#_display_modes[@]} - 1)))
        do
            if [[ ${_display_current_mode:-} == ${_display_modes[$_s]} ]]
            then

                _newmode="${_display_modes[$(( ++_s % ${#_display_modes[@]} ))]}"
                case $_newmode in
                    multi\ output\ external\ only)  _Display_Multi_Output_External_Only; ;;
                    multi\ output\ external\ above) _Display_Multi_Output_External_Above ;;
                    multi\ output\ scaled\ mirror)  _Display_Multi_Output_Scaled_Mirror ;;
                    multi\ output\ internal\ only)  _Display_Multi_Output_Internal_Only ;;
                esac
                _Add_Notification "Display mode changed to $_newmode"
                _display_change=true
                echo -n "$_newmode" > "$STATEROOT/display" && chmod +rw "$STATEROOT/display"
            fi
        done

    fi

    [[ -n $_display_change ]] && _Restart_Xmonad || _Add_Notification "No display state change"
    while ! pgrep dunst; do sleep 0.1; done
    _Display_Notifications
}

_Display_Apple_Fix ()
{
    [[ -n $APPLE_FIX ]] && return
    _Display_State
    #if echo "$XRANDR_VERBOSE_STATEROOT" | grep -q "00ffffffffffff000610369200224202"; then
    if [[ "${DISPLAY_STATEROOT[$DISPLAY_EXTERNAL]}" == "connected" && -z "${DISPLAY_NATIVE[$DISPLAY_EXTERNAL]:-}" ]]
    then
        for _rate in 45 # retaining loop to allow easy addition of frequencies
        do
            _newmode="$(gtf 1920 1200 ${_rate}.00 | grep Modeline | sed "s/.*Modeline\s*\(.*\)/\1/")"
            _addmode="$(gtf 1920 1200 ${_rate}.00 | grep Modeline | sed "s/.*Modeline\s*\(\".*\"\).*/\1/")"
            eval xrandr --newmode $_newmode &>/dev/null || true
            eval xrandr --addmode $DISPLAY_EXTERNAL $_addmode &>/dev/null || true
        done
    fi
    APPLE_FIX=true
}

_Display_Multi_Output_External_Only ()
{
    _Display_State
    xrandr --output $DISPLAY_EXTERNAL --scale 1x1 --primary --auto --output $DISPLAY_INTERNAL --off
}

_Display_Multi_Output_Internal_Only ()
{
    _Display_State
    xrandr --output $DISPLAY_INTERNAL --scale 1x1 --primary --auto --output $DISPLAY_EXTERNAL --off
}

_Display_Multi_Output_External_Above ()
{
    _Display_State
    xrandr --output $DISPLAY_INTERNAL --scale 1x1 --auto --output $DISPLAY_EXTERNAL --scale 1x1 --primary --auto --above $DISPLAY_INTERNAL
}

_Display_Multi_Output_Scaled_Mirror ()
{
    _Display_State
    _internal_resolution="${DISPLAY_NATIVE[$DISPLAY_INTERNAL]}"
    _external_resolution="${DISPLAY_NATIVE[$DISPLAY_EXTERNAL]}"
    set -- $(echo $_internal_resolution | tr "x" " "); _internal_resolution_x="$1"; _internal_resolution_y="$2"
    set -- $(echo $_external_resolution | tr "x" " "); _external_resolution_x="$1"; _external_resolution_y="$2"
    _x_scaling="$(echo "scale=4; $_external_resolution_x/$_internal_resolution_x" | bc)"
    _y_scaling="$(echo "scale=4; $_external_resolution_y/$_internal_resolution_y" | bc)"
    _internal_cmd="--scale ${_x_scaling}x${_y_scaling}"
    _external_cmd="--same-as ${INTERNAL_DISPLAY} --primary"
    eval "xrandr --output $DISPLAY_INTERNAL $_internal_cmd --output $DISPLAY_EXTERNAL $_external_cmd"
}

# ----------------------------------------------------------------------
# Execute function based on command line parameters
# ----------------------------------------------------------------------

# scan this script for function names and make sure $1 is present
function_list="$(cat $0 | grep "^[[:alpha:]]\w* ()\s*$" | sed "s_\(\W*\) ()_\1_g")"

help ()
{
#cat $0 | grep "^\([[:alpha:]]\w* ()\s*\|\s*\w*)\).*$" | sed "s_\(\w*\) ()_\1_g"
cat $0 | grep "^\([[:alpha:]]\w* ()\s*\|\s*[[:alpha:]|_]*)\).*$" | sed "s_\(\s*[[:alpha:]|_]*\).*).*_\1_g"
}

# execute a function if $1 matches
if [ -n "${1:-}" ] && echo "$function_list" | grep -wq "$1"; then $*; else help; fi

