#!/bin/bash

#echo "$0 emergency stop" && exit 1

set -o errexit
set -o nounset

# ----------------------------------------------------------------------
# mail-index - sync mail folder to mail tags
# es@ethanschoonover.com / Ethan Schoonover
# ----------------------------------------------------------------------
# summary:
#
# this script is designed to mimic gmail style tagging of messages
# for use with mutt-kz (a mutt fork integrating notmuch mail indexing)
# 
# a message may exist in multiple maildir directories (mailboxes).
# this script tags each message with the name of each maildir it is in.
# combined with the mutt-kz virtual folders in mutt, this allows us to
# see incoming mail tagged just as it is in the gmail interface.
#
# note that in this model I'm using gmail filters to preprocess, though
# this works even without doing that on any existing mail.
#
# a note on filing mail: I generally don't tag mail, I file it. this
# script is designed such that, if you wish to tag mail with other
# "labels", you do so by actually moving/copying the message to real
# mailboxes using mutt move/copy commands. after this is done, running
# this script again (either manually or automatically on maildir change)
# will sync up those "physical" location changes with the notmuch tags.
# 
# ----------------------------------------------------------------------
# how to initiate a mail index using this script
#
# - manually via command line
# - as a postsynchook in offlineimap
# - via inotify / systemd on maildir directory tree / inbox file changes
#
# ----------------------------------------------------------------------


# ----------------------------------------------------------------------
# Global Variables
# ----------------------------------------------------------------------
# specific to the offlineimap/maildir/notmuch configs

# inbox (mutt: spool) folder-name/tag-name
INBOX="INBOX"

# sent mail (mutt: record) folder-name/tag-name
SENT="sent"

# archived mail (mutt: mbox or received) folder-name/tag-name
ARCHIVE="archive"

# tag assigned to new mail by `notmuch new`, removed at end of this script
# VERY IMPORTANT for the implicit strategy. please ensure that this
# matches your "tags=new" assignment in .notmuch-config
NEW="new"

# tag assigned to unread mail
UNREAD="unread"

# the tag used to mark a message for explicit removal from a folder
# (for explicit removal method - not currently used)
UNTAG="UNTAG"

# the tag used as a shorthand for removal from inbox (this tag is essentially
# converted to the two tags -INBOX and +UNTAG later in this script)
# (for explicit removal method - not currently used)
UNINBOX="UNINBOX"


# ----------------------------------------------------------------------
# Mailboxes
# ----------------------------------------------------------------------
# get list of mailboxes using the mboxes file output by offlineimap
# other strategies to create this list include a directory listing,
# possibly recursive, of the root maildir
# ----------------------------------------------------------------------

MAILBOXES="$(sed 's/[^"]*"+\([^"]*\)"/\1\n/g' ~/var/mail/mailboxes)"


# ----------------------------------------------------------------------
# Functions
# ----------------------------------------------------------------------

Explicit_Tag_For_Archiving ()
{
    # usage:
    # Explicit_Tag_For_Archiving
    #
    # this takes any mail tagged with the UNINBOX tag and converts it
    # to a mail message tagged with UNTAG and removes INBOX from it.
    # this will then be removed later from the inbox by the explicit 
    # untag function
    #
    # this duplicates archiving in gmail and thus the "UNINBOX" tag
    # may be applied to any message in any folder and the "INBOX" copy
    # will be removed, leaving only the other "tags" on this message.
    #
    # note that it's possible to skip using MarkForArchive and
    # ExplicitRemove and JUST use ImplicitRemove

    $RUNCMD "notmuch tag +$UNTAG -$INBOX -$UNINBOX -- tag:$UNINBOX"
}

Explicit_Remove_Messages_From ()
{
    # usage:
    # Explicit_Remove_Messages_From $MAILBOX
    #
    # where $MAILBOX is similar to "INBOX" or "friends/bob" (used as
    # a notmuch "folder:MAILBOX" search)
    #
    # Explicit removal using the "UNTAG" tag to identify messages
    # that are marked for untagging, compared to implicit untagging
    # which does not use "UNTAG".

    local MAILFOLDER=$1
    local MAILTAG="${MAILFOLDER##*/}" # trim to last path component
    local BOUNDEDFOLDER="/$(echo "$MAILFOLDER" | sed "s+^/\(.*.\)/$+\1+")/"

    local MESSAGES_TO_REMOVE="$(\
        notmuch search --output=messages\
        folder:"$MAILFOLDER" AND tag:"$UNTAG" NOT tag:"$MAILTAG")"

    # remove UNTAGged message from ONLY the folder we are currently processing
    for MESSAGE in $MESSAGES_TO_REMOVE; do
        $RUNCMD "rm $(notmuch search --output=files "$MESSAGE" | grep "$BOUNDED_FOLDER")"
    done
}

Implicit_Remove_Messages_From ()
{
    # TODO: there is a chance that, given nested maildirs that have a common
    # message ID mail in them, the message could be untagged from both.
    # (see the grep below... it could be more accurate)

    # usage:
    # Implicit_Remove_Messages_From $MAILBOX
    #
    # where $MAILBOX is similar to "INBOX" or "friends/bob" (used as
    # a notmuch "folder:MAILBOX" search)
    #
    # if a message has an archive tag, no "NEW" tag, and is missing 
    # the tag for its folder, we assume that it is supposed to be
    # removed from this folder (== gmail label removed)
    #
    # make sure to use "new" for incoming messages in this case to avoid
    # running this on newly received or newly refiled messages accidentally

    local MAILFOLDER=$1
    local MAILTAG="${MAILFOLDER##*/}" # trim to last path component
    local BOUNDEDFOLDER="/$(echo "$MAILFOLDER" | sed "s+^/\(.*.\)/$+\1+")/"

    echo "IMPLICIT: folder:$MAILFOLDER AND tag:$ARCHIVE NOT tag:$MAILTAG NOT tag:$NEW"

    local MESSAGES_TO_REMOVE="$(\
        notmuch search --output=messages\
        folder:"$MAILFOLDER" AND tag:"$ARCHIVE" NOT tag:"$MAILTAG" NOT tag:"$NEW")"

    # remove UNTAGged message from ONLY the folder we are currently processing
    for MESSAGE in $MESSAGES_TO_REMOVE; do
        $RUNCMD "rm $(notmuch search --output=files "$MESSAGE" | grep "$BOUNDEDFOLDER")"
    done
}

Remove_Old_Tags_From ()
{
    # usage:
    # Remove_Old_Tags_From $MAILBOX
    #
    # where $MAILBOX is similar to "INBOX" or "friends/bob" (used as
    # a notmuch "folder:MAILBOX" search)
    # 
    # if message has a tag for a folder it is no longer in, remove that tag
    # (likely because that message was removed from that single folder, either
    # manually via delete - in which case you shouldn't be syncing the Maildir flags
    # in .notmuch-config - or using `rm` in this script)

    local MAILFOLDER=$1
    local MAILTAG="${MAILFOLDER##*/}" # trim to last path component

    $RUNCMD "notmuch tag -$MAILTAG -- tag:$MAILTAG NOT folder:$MAILFOLDER NOT folder:trash"
}

Add_New_Tags_In ()
{
    # usage:
    #
    # Add_New_Tags_In $MAILBOX
    #
    # where $MAILBOX is similar to "INBOX" or "friends/bob" (used as
    # a notmuch "folder:MAILBOX" search)
    #
    # if the message is (likely newly) in a folder that it isn't tagged for
    # add the tag now (also skipping mails that were just untagged above)

    local MAILFOLDER=$1
    local MAILTAG="${MAILFOLDER##*/}" # trim to last path component

    $RUNCMD "notmuch tag +$MAILTAG -- folder:$MAILFOLDER NOT tag:$MAILTAG NOT tag:$UNTAG"
}

Cleanup_Tags ()
{
    # remove UNTAGGED tags since we've processed all of the folders now
    $RUNCMD "notmuch tag -\"$UNTAG\" -- tag:\"$UNTAG\""

    # anything in sent mail should have the unread flag removed
    $RUNCMD "notmuch tag -\"$UNREAD\" -- folder:\"$SENT\""

    # remove "$NEW" tags (critical for implicit strategy)
    $RUNCMD "notmuch tag -\"$NEW\" -- tag:\"$NEW\""
}

# ======================================================================
# MAIN
# ======================================================================

# dry run check
# ----------------------------------------------------------------------
# check initial argument for --dry-run (or -d) or --help (or -h)
# --dry-run (-d) makes no changes and simply echos what will be done

case ${1:-} in
    *-d*) RUNCMD=echo; echo "DRYRUN - no changes will be made"; ;;
    *-h*) echo "usage: mail-index [--dry-run]"; exit; ;;
    *) RUNCMD=eval; ;;
esac

# index new mail
# ----------------------------------------------------------------------
# normally this is run by offlineimap postsynchook and thus will never
# conflict with an existing database lock by notmuch. however, in cases
# where I might want to run it *both* via the postsynchook and also,
# possibly, via inotify/systemd monitoring of my maildir path for INBOX
# updates (e.g. for IDLE incoming mail that won't get indexed until a
# new postsynchook otherwise), it's possible that I trigger a new index
# even when I'm already indexing.
#
# In the case of inotify/systemd path monitoring, I suppose I should build
# in a delay either at the systemd level or in this script, or just bail
# in case of an existing notmuch run (in which case the try block below
# isn't necessary).

COUNT=0
MAXTRIES=10
SUCCESS=false

while ! $SUCCESS; do

    let COUNT=$(( $COUNT + 1 ));

    if $RUNCMD "notmuch new"; then
        SUCCESS=true
    elif [[ $COUNT > $MAXTRIES ]]; then
        WARNING="Notmuch was busy for maximum $MAXTRIES index attempts - $0"
        echo "$WARNING"
        warn "$WARNING"
        exit 1
    fi

done

# process mailboxes
# ----------------------------------------------------------------------

#Explicit_Tag_For_Archiving

for MAILBOX in $MAILBOXES; do
    #Explicit_Remove_Messages_From $MAILBOX
    Implicit_Remove_Messages_From $MAILBOX
    Remove_Old_Tags_From $MAILBOX
    Add_New_Tags_In $MAILBOX
done
Cleanup_Tags

